{"version":3,"file":"static/js/917.b50f05a9.chunk.js","mappings":"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","sources":["webpack://notes-organizer/./src/components/EditTodo/EditTodo.module.scss?c2ba","components/EditTodo/EditTodo.tsx","pages/EditPage/EditPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"editTodo\":\"EditTodo_editTodo__AXezh\",\"todoPart\":\"EditTodo_todoPart__mI6Cn\",\"textarea\":\"EditTodo_textarea__AvvZ0\",\"scroll\":\"EditTodo_scroll__Gc7OP\",\"addUserGroup\":\"EditTodo_addUserGroup__wBn+W\",\"addUser\":\"EditTodo_addUser__a3Cq3\",\"modal\":\"EditTodo_modal__VUhBN\",\"modalBorder\":\"EditTodo_modalBorder__TklCT\",\"dismissButton\":\"EditTodo_dismissButton__dXz+4\",\"userListShow\":\"EditTodo_userListShow__41-p2\",\"edit\":\"EditTodo_edit__6cZZD\",\"preview\":\"EditTodo_preview__4Vha-\",\"checkbox\":\"EditTodo_checkbox__g7fe+\",\"checkboxDiv\":\"EditTodo_checkboxDiv__aJLli\",\"wrap\":\"EditTodo_wrap__IYppw\",\"btnPart\":\"EditTodo_btnPart__qNEVo\",\"btnReturn\":\"EditTodo_btnReturn__aOV6E\",\"previewInMobile\":\"EditTodo_previewInMobile__umgSh\"};","import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useNavigate } from 'react-router-dom';\nimport moment, { Moment } from 'moment';\nimport { useAppDispatch } from '../../hooks/hooks';\nimport { useMediaQuery } from 'react-responsive';\nimport { editTodo } from '../../Redux/todo/todo-operations';\nimport { getLogin } from '../../Redux/auth/auth-selectors';\nimport { getTodoMessage } from '../../Redux/todo/todo-selectors'\nimport { clearTodoMessage, createMessageConfirmation } from '../../Redux/todo/todo-slice';\nimport { getEmailList } from '../../Redux/technical/technical-selectors';\nimport { getOptionMenu } from '../../Redux/technical/technical-selectors';\nimport Container from '../Shared/Container';\nimport Calendar from '../Shared/Calendar';\nimport SelectField from '../Shared/SelectField';\nimport Button from '../Shared/Button';\nimport Text from '../Shared/Text';\nimport TextField from '../Shared/TextField';\nimport UserList from '../../components/CreateTodo/UserList';\nimport Todo from '../Todo/Todo';\nimport Message from '../Shared/Message';\nimport { fields } from '../Shared/TextField/fields'\nimport { ITodoCreate } from '../types/todo/todo';\nimport { ITodoProps } from '../Todo/Todo'\nimport { FaPlus } from 'react-icons/fa';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { ITodoPrewievProps } from '../TodoPreview/TodoPreview';\n\nimport s from './EditTodo.module.scss';\n\ninterface EditTodoProps {\n    todoData: ITodoPrewievProps;\n}\n\nconst EditTodo: React.FC<EditTodoProps> = ({ todoData }) => {\n\n    const vpHeight = window.innerHeight;\n    const [dynamicStyles, setDynamicStyles] = useState({});\n    const [isShowPreviewInMobile, setIsShowPreviewInMobile] = useState(false);\n    const isMobile = useMediaQuery({ maxWidth: 767 });\n\n    const selectedUsersInitial = todoData?.otherMembers ? [todoData.otherMembers] : [];\n    const additionalInfoInitial = todoData?.additionalInfo ? todoData.additionalInfo : '';\n    const dateFromInitial = todoData?.dateFrom ? todoData.dateFrom : '';\n    const dateToInitial = todoData?.dateTo ? todoData.dateTo : '';\n    const otherMembersInitial = todoData?.otherMembers ? todoData.otherMembers : '';\n    const partInitial = todoData?.part ? todoData.part : '';\n    const subjectInitial = todoData?.subject ? todoData.subject : '';\n    const saveAfterDeadlineInitial = todoData?.saveAfterDeadline ? todoData.saveAfterDeadline : false;\n    const _idInitial = todoData?._id ? todoData._id : '';\n\n    const dispatch = useAppDispatch();\n    const navigate = useNavigate();\n    const isUserLogin = useSelector(getLogin);\n    const arrayUser = useSelector(getEmailList);\n    const options = useSelector(getOptionMenu);\n    const message = useSelector(getTodoMessage);\n    const [showUsersList, setShowUsersList] = useState<boolean>(false);\n    const [selectedUsers, setSelectedUsers] = useState<string[]>(selectedUsersInitial);\n    const format = \"DD.MM.YYYY\";\n    const [selectedDateFrom, setSelectedDateFrom] = useState<Moment>(moment(dateFromInitial, format));\n    const [selectedDateTo, setSelectedDateTo] = useState<Moment>(moment(dateToInitial, format));\n\n\n    const initialState = {\n        additionalInfo: additionalInfoInitial,\n        dateFrom: dateFromInitial,\n        dateTo: dateToInitial,\n        otherMembers: otherMembersInitial,\n        part: partInitial,\n        subject: subjectInitial,\n        saveAfterDeadline: saveAfterDeadlineInitial,\n    }\n    const [previewData, setPreviewData] = useState<ITodoProps>(initialState);\n\n    useEffect(() => {\n        setDynamicStyles({\n            height: isUserLogin ? `${vpHeight - 64}px` : `${vpHeight - 64 - 39}px`,\n        });\n    }, [isUserLogin, vpHeight]);\n\n    useEffect(() => {\n        if (!todoData || !Object.keys(todoData).length) {\n            navigate('/');\n        }\n    }, [todoData, navigate]);\n\n    useEffect(() => {\n        if (selectedUsers.length > 0) {\n            updatePreviewField('otherMembers', selectedUsers.join(', '));\n        } if (selectedUsers.length === 0) {\n            updatePreviewField('otherMembers', '');\n        }\n    }, [selectedUsers]);\n\n    const updatePreviewField = (fieldName: string, value: any) => {\n        if (fieldName === 'dateFrom') {\n            const formattedValue = moment(value, 'DD.MM.YYYY');\n            setSelectedDateFrom(formattedValue);\n            setPreviewData((prevData) => ({\n                ...prevData,\n                [fieldName]: value,\n            }));\n        } if (fieldName === 'dateTo') {\n            const formattedValue = moment(value, 'DD.MM.YYYY');\n            setSelectedDateTo(formattedValue);\n            setPreviewData((prevData) => ({\n                ...prevData,\n                [fieldName]: value,\n            }));\n        } if (fieldName === 'part') {\n            setPreviewData((prevData) => ({\n                ...prevData,\n                [fieldName]: value.value,\n            }));\n        } else {\n            setPreviewData((prevData) => ({\n                ...prevData,\n                [fieldName]: value,\n            }));\n        }\n    };\n\n    const { control, handleSubmit, reset } = useForm<ITodoCreate>({\n        defaultValues: {\n            additionalInfo: additionalInfoInitial,\n            dateFrom: dateFromInitial,\n            dateTo: dateToInitial,\n            otherMembers: otherMembersInitial,\n            part: { value: partInitial, label: partInitial },\n            subject: subjectInitial,\n            saveAfterDeadline: saveAfterDeadlineInitial,\n        },\n    });\n\n    const onSubmit = async (data: ITodoCreate) => {\n        const finalData: ITodoCreate = {\n            part: data.part.value,\n            subject: data.subject,\n            dateFrom: data.dateFrom,\n            dateTo: data.dateTo,\n            additionalInfo: data.additionalInfo,\n            otherMembers: previewData.otherMembers,\n            saveAfterDeadline: data.saveAfterDeadline,\n            _id: todoData._id,\n        }\n\n        if (!isUserLogin) {\n            const existingTasks = JSON.parse(localStorage.getItem('notes-organizer_tasks') || '[]');\n            const taskIndex = existingTasks.findIndex((task: ITodoCreate) => task._id === _idInitial);\n\n            if (taskIndex !== -1) {\n                existingTasks[taskIndex] = { ...existingTasks[taskIndex], ...finalData };\n                localStorage.setItem('notes-organizer_tasks', JSON.stringify(existingTasks));\n                dispatch(createMessageConfirmation(\"Todo edited successfully\"));\n            } else {\n                return;\n            }\n        } else {\n            await dispatch(editTodo(finalData));\n        }\n\n        reset();\n        setShowUsersList(false);\n        setSelectedUsers([]);\n        setSelectedDateFrom(moment());\n        setSelectedDateTo(moment());\n        setPreviewData(initialState);\n        naviagteToList();\n    };\n\n    const handleAddUsersClick = () => {\n        if (!showUsersList) {\n            setShowUsersList(true);\n        } else {\n            setShowUsersList(false);\n        }\n    };\n\n    const resetMessage = () => {\n        const timeoutId = setTimeout(() => {\n            dispatch(clearTodoMessage());\n        }, 10000);\n        return () => clearTimeout(timeoutId);\n    };\n\n    const naviagteToList = () => {\n        const timeoutId = setTimeout(() => {\n            navigate('/list');\n        }, 10000);\n        return () => clearTimeout(timeoutId);\n    };\n\n    const handlePreviewButtonClick = () => {\n        setIsShowPreviewInMobile(!isShowPreviewInMobile);\n    };\n\n    return (\n    <section className={s.editTodo} style={dynamicStyles}>\n        <Container>\n            <div className={s.todoPart}>\n                <div className={s.edit}>\n                    <form className={s.form} onSubmit={handleSubmit(onSubmit)}>\n                        <Text\n                            text={'Розділ'}\n                            textClass=\"title-form\"\n                        />\n                        <Controller\n                            control={control}\n                            name=\"part\"\n                            rules={{ required: true }}\n                            render={({ field: {onChange, value}, fieldState }) => (\n                            <SelectField\n                                value={value}\n                                handleChange={(newValue) => {\n                                    onChange(newValue);\n                                    updatePreviewField('part', newValue);\n                                }}\n                                name=\"part\"\n                                className=\"createTodo\"\n                                placeholder={partInitial}\n                                required={true}\n                                options={options}\n                                defaultValue={{\n                                    value: partInitial,\n                                    label: partInitial,\n                                }}\n                            />\n                            )}\n                        />\n                        <Text\n                            text={'Тема'}\n                            textClass=\"title-form\"\n                        />\n                        <Controller\n                            control={control}\n                            name=\"subject\"\n                            rules={{ required: true}}\n                            render={({ field: {onChange, value}, fieldState }) => (\n                            <TextField\n                                value={value}\n                                control={control}\n                                className=\"createTodo\"\n                                handleChange={(e) => {\n                                    const newValue = e.target.value;\n                                    onChange(newValue);\n                                    updatePreviewField('subject', newValue);\n                                    }}\n                                error={fieldState.error}\n                                {...fields.subject}\n                            />\n                            )}\n                        />\n                        <Text\n                            text={'Дата початку'}\n                            textClass=\"title-form\"\n                        />\n                        <Controller\n                            control={control}\n                            name=\"dateFrom\"\n                            rules={{ required: true}}\n                            render={({ field: {onChange}}) => (\n                            <Calendar\n                                dateFormat=\"dd.MM.yyyy\" \n                                showMonthYearPicker={false} \n                                value={selectedDateFrom.toDate()} \n                                handleChange={(newValue) => {\n                                    onChange(newValue);\n                                    updatePreviewField('dateFrom', newValue);\n                                }}\n                            />\n                            )}\n                        />\n                        <Text\n                            text={'Дата завершення'}\n                            textClass=\"title-form\"\n                        />\n                        <Controller\n                            control={control}\n                            name=\"dateTo\"\n                            rules={{ required: true}}\n                            render={({ field: {onChange}}) => (\n                            <Calendar\n                                dateFormat=\"dd.MM.yyyy\" \n                                showMonthYearPicker={false} \n                                value={selectedDateTo.toDate()} \n                                handleChange={(newValue) => {\n                                    onChange(newValue);\n                                    updatePreviewField('dateTo', newValue);\n                                }}\n                            />\n                            )}\n                        />\n                        <Text\n                            text={'Додаткова інформація'}\n                            textClass=\"title-form\"\n                        />\n                        <Controller\n                            control={control}\n                            name=\"additionalInfo\"\n                            rules={{ required: false}}\n                            render={({ field: {onChange, value}, fieldState }) => (\n                            <textarea\n                                className={`${s.textarea} ${s.scroll}`}\n                                value={value}\n                                onChange={(e) => {\n                                    onChange(e.target.value);\n                                    updatePreviewField('additionalInfo', e.target.value);\n                                }}\n                                rows={3}\n                                cols={40}\n                            />\n                            )}\n                        />\n                            {isUserLogin && \n                                <>\n                        <Text\n                            text={'Користувачі з яким ви хочете поділитися завданням'}\n                            textClass=\"title-form\"\n                        />\n                        <div className={s.userListShow}>\n                            <Text\n                                text={selectedUsers.join(', ')}\n                                textClass=\"hidenInputCreateTodo\"\n                            />\n                        </div>\n                        <div className={s.addUserGroup}> \n                            <div className={s.addUser} onClick={handleAddUsersClick}>   \n                                <FaPlus size={20} color='white' /> \n                            </div>  \n                            <Text\n                                text={!showUsersList ? 'Додати користувачів' : 'Обрати користувачів'}\n                                textClass=\"title-form-add-user\"\n                            /> \n                        </div>\n                            {showUsersList && <div className={s.modal}>\n                                <div className={s.modalBorder}>\n                                    <button className={s.dismissButton} onClick={handleAddUsersClick }>\n                                        <FontAwesomeIcon icon={faTimes} size=\"lg\" color='white' />\n                                    </button>\n                                    <UserList\n                                        arrayUser={arrayUser}\n                                        selectedUsers={selectedUsers}\n                                        setSelectedUsers={setSelectedUsers}\n                                    />\n                                </div>\n                            </div>}\n                            </>}  \n                        <Text\n                            text={'Зберігати завдання після закінчення терміну виконання'}\n                            textClass=\"title-form\"\n                        />\n                        <Controller\n                            control={control}\n                            name=\"saveAfterDeadline\"\n                            render={({ field: { onChange, value } }) => (\n                            <div>\n                                <input\n                                    type=\"checkbox\"\n                                    className={s.checkbox}\n                                    checked={value}\n                                    onChange={(e) => {\n                                        onChange(e.target.checked);\n                                        updatePreviewField('saveAfterDeadline', e.target.checked)\n                                    }}\n                                />\n                            </div>\n                            )}\n                        />\n                        <div className={s.btnPart}>\n                            <div className={s.wrap}>\n                                <Button text=\"Зберегти зміни\" btnClass=\"btnLight\" />\n                            </div>\n                                {isMobile && (<div className={s.wrap}>\n                                    <Button text=\"Перегляд\" btnClass=\"btnLight\" handleClick={handlePreviewButtonClick} type='button' />\n                            </div>)}\n                        </div>\n                    </form>\n                </div>\n                {!isMobile && (<div className={s.preview}>\n                    <Todo {...previewData} />\n                </div>)}\n                {isMobile && isShowPreviewInMobile && (<div className={s.previewInMobile}>\n                    <Todo {...previewData} />\n                    <div className={s.btnReturn}>\n                        <Button text=\"Повернутися\" btnClass=\"btnLight\" handleClick={handlePreviewButtonClick} type='button' />\n                    </div>\n                </div>)}\n            </div>\n            {message && (\n                <Message text={`${message}`} onDismiss={resetMessage} type=\"todo\" />\n            )}\n        </Container>\n    </section>\n    );\n}\n\nexport default EditTodo;","import { useSelector } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport { getLogin } from '../../Redux/auth/auth-selectors';\nimport Text from '../../components/Shared/Text';\nimport EditTodo from '../../components/EditTodo/EditTodo';\n\nconst EditPage: React.FC = () => {\n\n    const isUserLogin = useSelector(getLogin);\n    const location = useLocation();\n    const todoData = location.state;\n\n    return (\n        <>\n        {!isUserLogin && (\n            <Text\n                text={'Зареєструйтесь, щоб отримати доступ до ваших завдань на різних пристроях'}\n                textClass=\"catalogTitle\"\n            />\n        )}\n        <EditTodo todoData={todoData} />\n        </>\n    );\n};\n\nexport default EditPage;"],"names":["_ref","todoData","vpHeight","window","innerHeight","_useState","useState","_useState2","_slicedToArray","dynamicStyles","setDynamicStyles","_useState3","_useState4","isShowPreviewInMobile","setIsShowPreviewInMobile","isMobile","useMediaQuery","maxWidth","selectedUsersInitial","otherMembers","additionalInfoInitial","additionalInfo","dateFromInitial","dateFrom","dateToInitial","dateTo","otherMembersInitial","partInitial","part","subjectInitial","subject","saveAfterDeadlineInitial","saveAfterDeadline","_idInitial","_id","dispatch","useAppDispatch","navigate","useNavigate","isUserLogin","useSelector","getLogin","arrayUser","getEmailList","options","getOptionMenu","message","getTodoMessage","_useState5","_useState6","showUsersList","setShowUsersList","_useState7","_useState8","selectedUsers","setSelectedUsers","format","_useState9","moment","_useState10","selectedDateFrom","setSelectedDateFrom","_useState11","_useState12","selectedDateTo","setSelectedDateTo","initialState","_useState13","_useState14","previewData","setPreviewData","useEffect","height","concat","Object","keys","length","updatePreviewField","join","fieldName","value","formattedValue","prevData","_objectSpread","_defineProperty","_useForm","useForm","defaultValues","label","control","handleSubmit","reset","onSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","finalData","existingTasks","taskIndex","wrap","_context","prev","next","JSON","parse","localStorage","getItem","findIndex","task","setItem","stringify","createMessageConfirmation","abrupt","editTodo","naviagteToList","stop","_x","apply","arguments","handleAddUsersClick","timeoutId","setTimeout","clearTimeout","handlePreviewButtonClick","_jsx","className","s","style","children","_jsxs","Container","todoPart","edit","form","Text","text","textClass","Controller","name","rules","required","render","_ref3","_ref3$field","field","onChange","fieldState","SelectField","handleChange","newValue","placeholder","defaultValue","_ref4","_ref4$field","TextField","e","target","error","fields","_ref5","Calendar","dateFormat","showMonthYearPicker","toDate","_ref6","_ref7","_ref7$field","textarea","scroll","rows","cols","_Fragment","userListShow","addUserGroup","addUser","onClick","FaPlus","size","color","modal","modalBorder","dismissButton","FontAwesomeIcon","icon","faTimes","UserList","_ref8","_ref8$field","type","checkbox","checked","btnPart","Button","btnClass","handleClick","preview","Todo","previewInMobile","btnReturn","Message","onDismiss","clearTodoMessage","useLocation","state","EditTodo"],"sourceRoot":""}