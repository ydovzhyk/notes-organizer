{"version":3,"file":"static/js/409.fb905c93.chunk.js","mappings":"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","sources":["components/helpers/searchLocalStoradge.tsx","webpack://notes-organizer/./src/components/CreateTodo/CreateTodo.module.scss?25c2","components/CreateTodo/CreateTodo.tsx","pages/HomePage/HomePage.tsx"],"sourcesContent":["import { ITodoSearch, ITodoCreate } from '../types/todo/todo';\nimport moment from 'moment';\n\nconst isDateInRange = (date: string, startDate: string, endDate: string) => {\n  const momentDate = moment(date, 'DD.MM.YYYY', true);\n  const momentStartDate = moment(startDate, 'DD.MM.YYYY', true);\n  const momentEndDate = moment(endDate, 'DD.MM.YYYY', true);\n\n  return momentDate.isBetween(momentStartDate, momentEndDate, null, '[]');\n};\n\nexport const searchLocalStoradge = (searchData: ITodoSearch) => {\n  const lowerCaseSearchPhrase = searchData.searchByPhrase?.toLowerCase();\n  const localStorageData = localStorage.getItem('notes-organizer_tasks');\n  const currentDate = moment();\n\n  if (localStorageData) {\n    const tasks: ITodoCreate[] = JSON.parse(localStorageData);\n\n    const filteredTasks = tasks.filter(task => {\n      // 1) Пошук за датою\n      if (\n        searchData.searchByDate &&\n        !isDateInRange(searchData.searchByDate, task.dateFrom, task.dateTo)\n      ) {\n        return false;\n      }\n\n      // 2) Пошук за розділом\n      if (searchData.searchByPart && task.part !== searchData.searchByPart) {\n        return false;\n      }\n\n      // 3) Пошук за словом чи фразою\n      if (\n        lowerCaseSearchPhrase &&\n        !(\n          task.subject.toLowerCase().includes(lowerCaseSearchPhrase) ||\n          (task.additionalInfo &&\n            task.additionalInfo.toLowerCase().includes(lowerCaseSearchPhrase))\n        )\n      ) {\n        return false;\n      }\n\n      // 4) Пошук за статусом\n      if (\n        searchData.searchByStatus === 'Термін закінчився' &&\n        moment(currentDate, 'DD.MM.YYYY', true).isBefore(\n          moment(task.dateTo, 'DD.MM.YYYY', true)\n        )\n      ) {\n        return false;\n      }\n\n      if (\n        searchData.searchByStatus === 'Виконується' &&\n        moment(currentDate, 'DD.MM.YYYY', true).isAfter(\n          moment(task.dateTo, 'DD.MM.YYYY', true)\n        )\n      ) {\n        return false;\n      }\n\n      return true;\n    });\n\n    if (filteredTasks.length > 0) {\n      return filteredTasks;\n    } else {\n      return [];\n    }\n  }\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"todoPart\":\"CreateTodo_todoPart__M-oVy\",\"textarea\":\"CreateTodo_textarea__tkAlx\",\"scroll\":\"CreateTodo_scroll__4Mlw0\",\"addUserGroup\":\"CreateTodo_addUserGroup__o615u\",\"addUser\":\"CreateTodo_addUser__KGkLd\",\"modal\":\"CreateTodo_modal__eEXkl\",\"modalBorder\":\"CreateTodo_modalBorder__e8VLb\",\"dismissButton\":\"CreateTodo_dismissButton__Z0cPA\",\"userListShow\":\"CreateTodo_userListShow__mST2H\",\"form\":\"CreateTodo_form__Smlhi\",\"preview\":\"CreateTodo_preview__Hm0uN\",\"previewInMobile\":\"CreateTodo_previewInMobile__3u08V\",\"checkbox\":\"CreateTodo_checkbox__FY4EB\",\"checkboxDiv\":\"CreateTodo_checkboxDiv__jW9ib\",\"wrap\":\"CreateTodo_wrap__Fc8nQ\",\"btnPart\":\"CreateTodo_btnPart__Tfiw4\",\"btnReturn\":\"CreateTodo_btnReturn__uVadC\"};","import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useMediaQuery } from 'react-responsive';\nimport moment, { Moment } from 'moment';\nimport { useAppDispatch } from '../../hooks/hooks';\nimport { searchLocalStoradge } from '../helpers/searchLocalStoradge';\nimport { ITodoSearch } from '../types/todo/todo';\nimport { createTodo, synchronizeTodo } from '../../Redux/todo/todo-operations';\nimport { getLogin } from '../../Redux/auth/auth-selectors';\nimport { getTodoMessage } from '../../Redux/todo/todo-selectors';\nimport { getStopResetMessage } from '../../Redux/todo/todo-selectors';\nimport { statusStopResetMessage } from '../../Redux/todo/todo-slice';\nimport {\n  clearTodoMessage,\n  createMessageConfirmation,\n} from '../../Redux/todo/todo-slice';\nimport { getEmailList } from '../../Redux/technical/technical-selectors';\nimport { getOptionMenu } from '../../Redux/technical/technical-selectors';\nimport Container from '../Shared/Container';\nimport Calendar from '../Shared/Calendar';\nimport SelectField from '../Shared/SelectField';\nimport Button from '../Shared/Button';\nimport Text from '../Shared/Text';\nimport TextField from '../Shared/TextField';\nimport UserList from './UserList';\nimport Todo from '../Todo/Todo';\nimport Message from '../Shared/Message';\nimport { fields } from '../Shared/TextField/fields';\nimport { ITodoCreate } from '../types/todo/todo';\nimport { ITodoProps } from '../Todo/Todo';\nimport { FaPlus } from 'react-icons/fa';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport s from './CreateTodo.module.scss';\n\nconst CreateTodo: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const isUserLogin = useSelector(getLogin);\n  const arrayUser = useSelector(getEmailList);\n  const options = useSelector(getOptionMenu);\n  const message = useSelector(getTodoMessage);\n  const stopResetMessage = useSelector(getStopResetMessage);\n  const [showUsersList, setShowUsersList] = useState<boolean>(false);\n  const [selectedUsers, setSelectedUsers] = useState<string[]>([]);\n  const [selectedDateFrom, setSelectedDateFrom] = useState<Moment>(moment());\n  const [selectedDateTo, setSelectedDateTo] = useState<Moment>(moment());\n  const initialState = {\n    additionalInfo: '',\n    dateFrom: '',\n    dateTo: '',\n    otherMembers: '',\n    part: '',\n    subject: '',\n    saveAfterDeadline: false,\n  };\n  const [previewData, setPreviewData] = useState<ITodoProps>(initialState);\n  const [isShowPreviewInMobile, setIsShowPreviewInMobile] = useState(false);\n  const [todoToSynchronize, setTodoToSynchronize] = useState<ITodoCreate[]>([]);\n\n  const isMobile = useMediaQuery({ maxWidth: 767 });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (isUserLogin) {\n        const finalData: ITodoSearch = { searchByStatus: '' };\n        const localStoradgeTodo = searchLocalStoradge(finalData);\n        if (localStoradgeTodo && localStoradgeTodo.length > 0) {\n          setTodoToSynchronize(localStoradgeTodo);\n          await dispatch(statusStopResetMessage(true));\n          await dispatch(\n            createMessageConfirmation(\n              'You have tasks saved locally on your computer, would you like to synchronize them with the server?'\n            )\n          );\n        }\n      }\n    };\n    fetchData();\n  }, [isUserLogin, dispatch]);\n\n  useEffect(() => {\n    if (selectedUsers.length > 0) {\n      updatePreviewField('otherMembers', selectedUsers.join(', '));\n    }\n    if (selectedUsers.length === 0) {\n      updatePreviewField('otherMembers', '');\n    }\n  }, [selectedUsers]);\n\n  const updatePreviewField = (fieldName: string, value: any) => {\n    if (fieldName === 'dateFrom') {\n      const formattedValue = moment(value, 'DD.MM.YYYY');\n      setSelectedDateFrom(formattedValue);\n      setPreviewData(prevData => ({\n        ...prevData,\n        [fieldName]: value,\n      }));\n    }\n    if (fieldName === 'dateTo') {\n      const formattedValue = moment(value, 'DD.MM.YYYY');\n      setSelectedDateTo(formattedValue);\n      setPreviewData(prevData => ({\n        ...prevData,\n        [fieldName]: value,\n      }));\n    }\n    if (fieldName === 'part') {\n      setPreviewData(prevData => ({\n        ...prevData,\n        [fieldName]: value.value,\n      }));\n    } else {\n      setPreviewData(prevData => ({\n        ...prevData,\n        [fieldName]: value,\n      }));\n    }\n  };\n\n  const { control, handleSubmit, reset } = useForm<ITodoCreate>({\n    defaultValues: {\n      part: { value: '', label: '' },\n      subject: '',\n      dateFrom: '',\n      dateTo: '',\n      additionalInfo: '',\n      saveAfterDeadline: false,\n    },\n  });\n\n  function generateUniqueId() {\n    const timestamp = ((new Date().getTime() / 1000) | 0).toString(16);\n    const uniqueId =\n      timestamp +\n      'xxxxxxxxxxxxxxxx'.replace(/[x]/g, function () {\n        return ((Math.random() * 16) | 0).toString(16);\n      });\n\n    return uniqueId;\n  }\n\n  const onSubmit = async (data: ITodoCreate) => {\n    const finalData: ITodoCreate = {\n      part: data.part.value,\n      subject: data.subject,\n      dateFrom: data.dateFrom,\n      dateTo: data.dateTo,\n      additionalInfo: data.additionalInfo,\n      otherMembers: previewData.otherMembers,\n      saveAfterDeadline: data.saveAfterDeadline,\n    };\n\n    if (!isUserLogin) {\n      const existingTasks = JSON.parse(\n        localStorage.getItem('notes-organizer_tasks') || '[]'\n      );\n      existingTasks.push({ ...finalData, _id: generateUniqueId() });\n      localStorage.setItem(\n        'notes-organizer_tasks',\n        JSON.stringify(existingTasks)\n      );\n      dispatch(createMessageConfirmation('Todo added successfully'));\n    } else {\n      await dispatch(createTodo(finalData));\n    }\n\n    reset();\n    setShowUsersList(false);\n    setSelectedUsers([]);\n    setSelectedDateFrom(moment());\n    setSelectedDateTo(moment());\n    setPreviewData(initialState);\n  };\n\n  const handleAddUsersClick = () => {\n    if (!showUsersList) {\n      setShowUsersList(true);\n    } else {\n      setShowUsersList(false);\n    }\n  };\n\n  const resetMessage = () => {\n    if (!stopResetMessage) {\n      const timeoutId = setTimeout(() => {\n        dispatch(clearTodoMessage());\n      }, 10000);\n      return () => clearTimeout(timeoutId);\n    }\n  };\n\n  const handlePreviewButtonClick = () => {\n    setIsShowPreviewInMobile(!isShowPreviewInMobile);\n  };\n\n  const synchronize = async (choice: true | false) => {\n    if (choice === true) {\n      const syncResonse = await dispatch(synchronizeTodo(todoToSynchronize));\n      if (syncResonse && syncResonse.meta.requestStatus === 'fulfilled') {\n        localStorage.setItem('notes-organizer_tasks', JSON.stringify([]));\n        setTodoToSynchronize([]);\n      }\n    } else {\n      dispatch(clearTodoMessage());\n      dispatch(statusStopResetMessage(false));\n    }\n  };\n\n  return (\n    <section className={s.createTodo}>\n      <Container>\n        <div className={s.todoPart}>\n          <form className={s.form} onSubmit={handleSubmit(onSubmit)}>\n            <Text text={'Розділ'} textClass=\"title-form\" />\n            <Controller\n              control={control}\n              name=\"part\"\n              rules={{ required: true }}\n              render={({ field: { onChange, value }, fieldState }) => (\n                <SelectField\n                  value={value}\n                  handleChange={newValue => {\n                    onChange(newValue);\n                    updatePreviewField('part', newValue);\n                  }}\n                  name=\"part\"\n                  className=\"createTodo\"\n                  placeholder=\"Оберіть опцію\"\n                  required={true}\n                  options={options}\n                />\n              )}\n            />\n            <Text text={'Тема'} textClass=\"title-form\" />\n            <Controller\n              control={control}\n              name=\"subject\"\n              rules={{ required: true }}\n              render={({ field: { onChange, value }, fieldState }) => (\n                <TextField\n                  value={value}\n                  control={control}\n                  className=\"createTodo\"\n                  handleChange={e => {\n                    const newValue = e.target.value;\n                    onChange(newValue);\n                    updatePreviewField('subject', newValue);\n                  }}\n                  error={fieldState.error}\n                  {...fields.subject}\n                />\n              )}\n            />\n            <Text text={'Дата початку'} textClass=\"title-form\" />\n            <Controller\n              control={control}\n              name=\"dateFrom\"\n              rules={{ required: true }}\n              render={({ field: { onChange } }) => (\n                <Calendar\n                  dateFormat=\"dd.MM.yyyy\"\n                  showMonthYearPicker={false}\n                  value={selectedDateFrom.toDate()}\n                  handleChange={newValue => {\n                    onChange(newValue);\n                    updatePreviewField('dateFrom', newValue);\n                  }}\n                />\n              )}\n            />\n            <Text text={'Дата завершення'} textClass=\"title-form\" />\n            <Controller\n              control={control}\n              name=\"dateTo\"\n              rules={{ required: true }}\n              render={({ field: { onChange } }) => (\n                <Calendar\n                  dateFormat=\"dd.MM.yyyy\"\n                  showMonthYearPicker={false}\n                  value={selectedDateTo.toDate()}\n                  handleChange={newValue => {\n                    onChange(newValue);\n                    updatePreviewField('dateTo', newValue);\n                  }}\n                />\n              )}\n            />\n            <Text text={'Додаткова інформація'} textClass=\"title-form\" />\n            <Controller\n              control={control}\n              name=\"additionalInfo\"\n              rules={{ required: false }}\n              render={({ field: { onChange, value }, fieldState }) => (\n                <textarea\n                  className={`${s.textarea} ${s.scroll}`}\n                  value={value}\n                  onChange={e => {\n                    onChange(e.target.value);\n                    updatePreviewField('additionalInfo', e.target.value);\n                  }}\n                  rows={3}\n                  cols={40}\n                />\n              )}\n            />\n            {isUserLogin && (\n              <>\n                <Text\n                  text={'Користувачі з яким ви хочете поділитися завданням'}\n                  textClass=\"title-form\"\n                />\n                <div className={s.userListShow}>\n                  <Text\n                    text={selectedUsers.join(', ')}\n                    textClass=\"hidenInputCreateTodo\"\n                  />\n                </div>\n                <div className={s.addUserGroup}>\n                  <div className={s.addUser} onClick={handleAddUsersClick}>\n                    <FaPlus size={20} color=\"white\" />\n                  </div>\n                  <Text\n                    text={\n                      !showUsersList\n                        ? 'Додати користувачів'\n                        : 'Обрати користувачів'\n                    }\n                    textClass=\"title-form-add-user\"\n                  />\n                </div>\n                {showUsersList && (\n                  <div className={s.modal}>\n                    <div className={s.modalBorder}>\n                      <button\n                        className={s.dismissButton}\n                        onClick={handleAddUsersClick}\n                      >\n                        <FontAwesomeIcon\n                          icon={faTimes}\n                          size=\"lg\"\n                          color=\"white\"\n                        />\n                      </button>\n                      <UserList\n                        arrayUser={arrayUser}\n                        selectedUsers={selectedUsers}\n                        setSelectedUsers={setSelectedUsers}\n                      />\n                    </div>\n                  </div>\n                )}\n              </>\n            )}\n            <Text\n              text={'Зберігати завдання після закінчення терміну виконання'}\n              textClass=\"title-form\"\n            />\n            <Controller\n              control={control}\n              name=\"saveAfterDeadline\"\n              render={({ field: { onChange, value } }) => (\n                <div className={s.checkboxDiv}>\n                  <input\n                    type=\"checkbox\"\n                    className={s.checkbox}\n                    checked={value}\n                    onChange={e => {\n                      onChange(e.target.checked);\n                      updatePreviewField('saveAfterDeadline', e.target.checked);\n                    }}\n                  />\n                </div>\n              )}\n            />\n            <div className={s.btnPart}>\n              <div className={s.wrap}>\n                <Button text=\"Створити\" btnClass=\"btnLight\" />\n              </div>\n              {isMobile && (\n                <div className={s.wrap}>\n                  <Button\n                    text=\"Перегляд\"\n                    btnClass=\"btnLight\"\n                    handleClick={handlePreviewButtonClick}\n                    type=\"button\"\n                  />\n                </div>\n              )}\n            </div>\n          </form>\n          {!isMobile && (\n            <div className={s.preview}>\n              <Todo {...previewData} />\n            </div>\n          )}\n          {isMobile && isShowPreviewInMobile && (\n            <div className={s.previewInMobile}>\n              <Todo {...previewData} />\n              <div className={s.btnReturn}>\n                <Button\n                  text=\"Повернутися\"\n                  btnClass=\"btnLight\"\n                  handleClick={handlePreviewButtonClick}\n                  type=\"button\"\n                />\n              </div>\n            </div>\n          )}\n        </div>\n        {message && (\n          <Message\n            text={`${message}`}\n            onDismiss={resetMessage}\n            onChoice={synchronize}\n            type=\"todo\"\n          />\n        )}\n      </Container>\n    </section>\n  );\n};\n\nexport default CreateTodo;\n","import CreateTodo from '../../components/CreateTodo';\n\nconst HomePage: React.FC = () => {\n  return (\n    <>\n      <CreateTodo />\n    </>\n  );\n};\n\nexport default HomePage;\n"],"names":["searchLocalStoradge","searchData","_searchData$searchByP","lowerCaseSearchPhrase","searchByPhrase","toLowerCase","localStorageData","localStorage","getItem","currentDate","moment","filteredTasks","JSON","parse","filter","task","searchByDate","isDateInRange","date","startDate","endDate","momentDate","momentStartDate","momentEndDate","isBetween","dateFrom","dateTo","searchByPart","part","subject","includes","additionalInfo","searchByStatus","isBefore","isAfter","length","CreateTodo","dispatch","useAppDispatch","isUserLogin","useSelector","getLogin","arrayUser","getEmailList","options","getOptionMenu","message","getTodoMessage","stopResetMessage","getStopResetMessage","showUsersList","setShowUsersList","useState","selectedUsers","setSelectedUsers","selectedDateFrom","setSelectedDateFrom","selectedDateTo","setSelectedDateTo","initialState","otherMembers","saveAfterDeadline","previewData","setPreviewData","isShowPreviewInMobile","setIsShowPreviewInMobile","todoToSynchronize","setTodoToSynchronize","isMobile","useMediaQuery","maxWidth","useEffect","async","finalData","localStoradgeTodo","statusStopResetMessage","createMessageConfirmation","fetchData","updatePreviewField","join","fieldName","value","formattedValue","prevData","_objectSpread","control","handleSubmit","reset","useForm","defaultValues","label","handleAddUsersClick","handlePreviewButtonClick","_jsx","className","s","createTodo","children","_jsxs","Container","todoPart","form","onSubmit","data","existingTasks","push","_id","Date","getTime","toString","replace","Math","random","setItem","stringify","Text","text","textClass","Controller","name","rules","required","render","_ref","field","onChange","fieldState","SelectField","handleChange","newValue","placeholder","_ref2","TextField","e","target","error","fields","_ref3","Calendar","dateFormat","showMonthYearPicker","toDate","_ref4","_ref5","concat","textarea","scroll","rows","cols","_Fragment","userListShow","addUserGroup","addUser","onClick","FaPlus","size","color","modal","modalBorder","dismissButton","FontAwesomeIcon","icon","faTimes","UserList","_ref6","checkboxDiv","type","checkbox","checked","btnPart","wrap","Button","btnClass","handleClick","preview","Todo","previewInMobile","btnReturn","Message","onDismiss","resetMessage","timeoutId","setTimeout","clearTodoMessage","clearTimeout","onChoice","choice","syncResonse","synchronizeTodo","meta","requestStatus","HomePage"],"sourceRoot":""}