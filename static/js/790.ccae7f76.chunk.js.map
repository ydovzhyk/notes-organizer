{"version":3,"file":"static/js/790.ccae7f76.chunk.js","mappings":"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","sources":["components/helpers/searchLocalStoradge.tsx","webpack://notes-organizer/./src/components/CreateTodo/CreateTodo.module.scss?4b59","components/CreateTodo/CreateTodo.tsx","pages/HomePage/HomePage.tsx"],"sourcesContent":["import { ITodoSearch, ITodoCreate } from '../types/todo/todo';\nimport moment from 'moment';\n\nconst isDateInRange = (date: string, startDate: string, endDate: string) => {\n    const momentDate = moment(date, 'DD.MM.YYYY', true);\n    const momentStartDate = moment(startDate, 'DD.MM.YYYY', true);\n    const momentEndDate = moment(endDate, 'DD.MM.YYYY', true);\n\n    return momentDate.isBetween(momentStartDate, momentEndDate, null, '[]');\n};\n\nexport const searchLocalStoradge = (searchData: ITodoSearch) => {\n    const lowerCaseSearchPhrase = searchData.searchByPhrase?.toLowerCase();\n    const localStorageData = localStorage.getItem('notes-organizer_tasks');\n    const currentDate = moment();\n\n    if (localStorageData) {\n        const tasks: ITodoCreate[] = JSON.parse(localStorageData);\n\n        const filteredTasks = tasks.filter((task) => {\n        // 1) Пошук за датою\n            if (\n                searchData.searchByDate &&\n                !isDateInRange(searchData.searchByDate, task.dateFrom, task.dateTo)\n            ) {\n                return false;\n            }\n\n        // 2) Пошук за розділом\n            if (searchData.searchByPart && task.part !== searchData.searchByPart) {\n                return false;\n            }\n\n        // 3) Пошук за словом чи фразою\n            if (\n                lowerCaseSearchPhrase &&\n                !(\n                    task.subject.toLowerCase().includes(lowerCaseSearchPhrase) ||\n                    (task.additionalInfo && task.additionalInfo.toLowerCase().includes(lowerCaseSearchPhrase))\n                )\n            ) {\n                return false;\n            }\n\n        // 4) Пошук за статусом\n            if (\n                searchData.searchByStatus === 'Термін закінчився' &&\n                moment(currentDate, 'DD.MM.YYYY', true).isBefore(moment(task.dateTo, 'DD.MM.YYYY', true))\n            ) {\n                return false;\n            }\n\n            if (\n                searchData.searchByStatus === 'Виконується' &&\n                moment(currentDate, 'DD.MM.YYYY', true).isAfter(moment(task.dateTo, 'DD.MM.YYYY', true))\n            ) {\n                return false;\n            }\n\n            return true;\n        });\n\n        if (filteredTasks.length > 0) {\n            return filteredTasks;\n        } else {\n            return [];\n        }\n    }\n};","// extracted by mini-css-extract-plugin\nexport default {\"createTodo\":\"CreateTodo_createTodo__0bag4\",\"todoPart\":\"CreateTodo_todoPart__M-oVy\",\"textarea\":\"CreateTodo_textarea__tkAlx\",\"scroll\":\"CreateTodo_scroll__4Mlw0\",\"addUserGroup\":\"CreateTodo_addUserGroup__o615u\",\"addUser\":\"CreateTodo_addUser__KGkLd\",\"modal\":\"CreateTodo_modal__eEXkl\",\"modalBorder\":\"CreateTodo_modalBorder__e8VLb\",\"dismissButton\":\"CreateTodo_dismissButton__Z0cPA\",\"userListShow\":\"CreateTodo_userListShow__mST2H\",\"create\":\"CreateTodo_create__og1pO\",\"preview\":\"CreateTodo_preview__Hm0uN\",\"previewInMobile\":\"CreateTodo_previewInMobile__3u08V\",\"checkbox\":\"CreateTodo_checkbox__FY4EB\",\"checkboxDiv\":\"CreateTodo_checkboxDiv__jW9ib\",\"wrap\":\"CreateTodo_wrap__Fc8nQ\",\"btnPart\":\"CreateTodo_btnPart__Tfiw4\",\"btnReturn\":\"CreateTodo_btnReturn__uVadC\"};","import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useMediaQuery } from 'react-responsive';\nimport moment, { Moment } from 'moment';\nimport { useAppDispatch } from '../../hooks/hooks';\nimport { searchLocalStoradge } from '../helpers/searchLocalStoradge';\nimport { ITodoSearch } from '../types/todo/todo';\nimport { createTodo, synchronizeTodo } from '../../Redux/todo/todo-operations';\nimport { getLogin } from '../../Redux/auth/auth-selectors';\nimport { getTodoMessage } from '../../Redux/todo/todo-selectors'\nimport { getStopResetMessage } from '../../Redux/todo/todo-selectors';\nimport { statusStopResetMessage } from '../../Redux/todo/todo-slice';\nimport { clearTodoMessage, createMessageConfirmation } from '../../Redux/todo/todo-slice';\nimport { getEmailList } from '../../Redux/technical/technical-selectors';\nimport { getOptionMenu } from '../../Redux/technical/technical-selectors';\nimport Container from '../Shared/Container';\nimport Calendar from '../Shared/Calendar';\nimport SelectField from '../Shared/SelectField';\nimport Button from '../Shared/Button';\nimport Text from '../Shared/Text';\nimport TextField from '../Shared/TextField';\nimport UserList from './UserList';\nimport Todo from '../Todo/Todo';\nimport Message from '../Shared/Message';\nimport { fields } from '../Shared/TextField/fields'\nimport { ITodoCreate } from '../types/todo/todo';\nimport { ITodoProps } from '../Todo/Todo';\nimport { FaPlus } from 'react-icons/fa';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport s from './CreateTodo.module.scss';\n\nconst CreateTodo: React.FC = () => {\n    const vpHeight = window.innerHeight;\n    const [dynamicStyles, setDynamicStyles] = useState({});\n    const dispatch = useAppDispatch();\n    const isUserLogin = useSelector(getLogin);\n    const arrayUser = useSelector(getEmailList);\n    const options = useSelector(getOptionMenu);\n    const message = useSelector(getTodoMessage);\n    const stopResetMessage = useSelector(getStopResetMessage);\n    const [showUsersList, setShowUsersList] = useState<boolean>(false);\n    const [selectedUsers, setSelectedUsers] = useState<string[]>([]);\n    const [selectedDateFrom, setSelectedDateFrom] = useState<Moment>(moment());\n    const [selectedDateTo, setSelectedDateTo] = useState<Moment>(moment());\n    const initialState = {\n        additionalInfo: '',\n        dateFrom: '',\n        dateTo: '',\n        otherMembers: '',\n        part: '',\n        subject: '',\n        saveAfterDeadline: false,\n    }\n    const [previewData, setPreviewData] = useState<ITodoProps>(initialState);\n    const [isShowPreviewInMobile, setIsShowPreviewInMobile] = useState(false);\n    const [todoToSynchronize, setTodoToSynchronize] = useState<ITodoCreate[]>([]);\n\n    const isMobile = useMediaQuery({ maxWidth: 767 });\n    // const isTablet = useMediaQuery({ minWidth: 768, maxWidth: 1279 });\n    // const isDesktop = useMediaQuery({ minWidth: 1280 });\n\n    useEffect(() => {\n        const fetchData = async () => {\n            if (isUserLogin) {\n                const finalData: ITodoSearch = { searchByStatus: '' };\n                const localStoradgeTodo = searchLocalStoradge(finalData);\n                if (localStoradgeTodo && localStoradgeTodo.length > 0) {\n                    setTodoToSynchronize(localStoradgeTodo);\n                    await dispatch(statusStopResetMessage(true));\n                    await dispatch(createMessageConfirmation(\"You have tasks saved locally on your computer, would you like to synchronize them with the server?\"));\n                }\n            }\n        };\n        fetchData();\n    }, [isUserLogin, dispatch]);\n\n    useEffect(() => {\n        if (selectedUsers.length > 0) {\n            updatePreviewField('otherMembers', selectedUsers.join(', '));\n        } if (selectedUsers.length === 0) {\n            updatePreviewField('otherMembers', '');\n        }\n    }, [selectedUsers]);\n\n    useEffect(() => {\n        setDynamicStyles({\n            height: isUserLogin ? `${vpHeight - 64}px` : `${vpHeight - 64}px`,\n        });\n    }, [isUserLogin, vpHeight]);\n\n    const updatePreviewField = (fieldName: string, value: any) => {\n        if (fieldName === 'dateFrom') {\n            const formattedValue = moment(value, 'DD.MM.YYYY');\n            setSelectedDateFrom(formattedValue);\n            setPreviewData((prevData) => ({\n                ...prevData,\n                [fieldName]: value,\n            }));\n        } if (fieldName === 'dateTo') {\n            const formattedValue = moment(value, 'DD.MM.YYYY');\n            setSelectedDateTo(formattedValue);\n            setPreviewData((prevData) => ({\n                ...prevData,\n                [fieldName]: value,\n            }));\n        } if (fieldName === 'part') {\n            setPreviewData((prevData) => ({\n                ...prevData,\n                [fieldName]: value.value,\n            }));\n        } else {\n            setPreviewData((prevData) => ({\n                ...prevData,\n                [fieldName]: value,\n            }));\n        }\n    };\n\n    const { control, handleSubmit, reset } = useForm<ITodoCreate>({\n        defaultValues: {\n            part: { value: '', label: '' },\n            subject: '',\n            dateFrom: '',\n            dateTo: '',\n            additionalInfo: '',\n            saveAfterDeadline: false,\n        },\n    });\n\n    function generateUniqueId() {\n        const timestamp = (new Date().getTime() / 1000 | 0).toString(16);\n        const uniqueId = timestamp + 'xxxxxxxxxxxxxxxx'.replace(/[x]/g, function() {\n        return (Math.random() * 16 | 0).toString(16);\n        });\n\n        return uniqueId;\n    }\n\n    const onSubmit = async (data: ITodoCreate) => {\n        const finalData: ITodoCreate = {\n            part: data.part.value,\n            subject: data.subject,\n            dateFrom: data.dateFrom,\n            dateTo: data.dateTo,\n            additionalInfo: data.additionalInfo,\n            otherMembers: previewData.otherMembers,\n            saveAfterDeadline: data.saveAfterDeadline,\n        }\n\n        if (!isUserLogin) {\n            const existingTasks = JSON.parse(localStorage.getItem('notes-organizer_tasks') || '[]');\n            existingTasks.push({ ...finalData, _id: generateUniqueId() });\n            localStorage.setItem('notes-organizer_tasks', JSON.stringify(existingTasks));\n            dispatch(createMessageConfirmation(\"Todo added successfully\"));\n        } else {\n            await dispatch(createTodo(finalData));\n        }\n\n        reset();\n        setShowUsersList(false);\n        setSelectedUsers([]);\n        setSelectedDateFrom(moment());\n        setSelectedDateTo(moment());\n        setPreviewData(initialState);\n    };\n\n    const handleAddUsersClick = () => {\n        if (!showUsersList) {\n            setShowUsersList(true);\n        } else {\n            setShowUsersList(false);\n        }\n    };\n\n    const resetMessage = () => {\n        if (!stopResetMessage) {\n            const timeoutId = setTimeout(() => {\n                dispatch(clearTodoMessage());\n            }, 10000);\n            return () => clearTimeout(timeoutId);\n        }\n    };\n\n    const handlePreviewButtonClick = () => {\n        setIsShowPreviewInMobile(!isShowPreviewInMobile);\n    };\n\n    const synchronize = async (choice: true | false) => {\n        if (choice === true) {\n            const syncResonse = await dispatch(synchronizeTodo(todoToSynchronize));\n            if (syncResonse && syncResonse.meta.requestStatus === 'fulfilled') {\n                localStorage.setItem('notes-organizer_tasks', JSON.stringify([]));\n                setTodoToSynchronize([]);\n            }\n        } else {\n            dispatch(clearTodoMessage());\n            dispatch(statusStopResetMessage(false));\n        }\n    };\n\nreturn (\n    <section className={s.createTodo} style={dynamicStyles}>\n        <Container>\n            <div className={s.todoPart}>\n                <div className={s.create}>\n                        <form className={s.form} onSubmit={handleSubmit(onSubmit)}>\n                            <Text\n                                text={'Розділ'}\n                                textClass=\"title-form\"\n                            />\n                            <Controller\n                                control={control}\n                                name=\"part\"\n                                rules={{ required: true }}\n                                render={({ field: { onChange, value }, fieldState }) => (\n                                    <SelectField\n                                        value={value}\n                                        handleChange={(newValue) => {\n                                            onChange(newValue);\n                                            updatePreviewField('part', newValue);\n                                        }}\n                                        name=\"part\"\n                                        className=\"createTodo\"\n                                        placeholder=\"Оберіть опцію\"\n                                        required={true}\n                                        options={options}\n                                    />\n                                )}\n                            />\n                            <Text\n                                text={'Тема'}\n                                textClass=\"title-form\"\n                            />\n                            <Controller\n                                control={control}\n                                name=\"subject\"\n                                rules={{ required: true }}\n                                render={({ field: { onChange, value }, fieldState }) => (\n                                    <TextField\n                                        value={value}\n                                        control={control}\n                                        className=\"createTodo\"\n                                        handleChange={(e) => {\n                                            const newValue = e.target.value;\n                                            onChange(newValue);\n                                            updatePreviewField('subject', newValue);\n                                        }}\n                                        error={fieldState.error}\n                                        {...fields.subject}\n                                    />\n                                )}\n                            />\n                            <Text\n                                text={'Дата початку'}\n                                textClass=\"title-form\"\n                            />\n                            <Controller\n                                control={control}\n                                name=\"dateFrom\"\n                                rules={{ required: true }}\n                                render={({ field: { onChange } }) => (\n                                    <Calendar\n                                        dateFormat=\"dd.MM.yyyy\"\n                                        showMonthYearPicker={false}\n                                        value={selectedDateFrom.toDate()}\n                                        handleChange={(newValue) => {\n                                            onChange(newValue);\n                                            updatePreviewField('dateFrom', newValue);\n                                        }}\n                                    />\n                                )}\n                            />\n                            <Text\n                                text={'Дата завершення'}\n                                textClass=\"title-form\"\n                            />\n                            <Controller\n                                control={control}\n                                name=\"dateTo\"\n                                rules={{ required: true }}\n                                render={({ field: { onChange } }) => (\n                                    <Calendar\n                                        dateFormat=\"dd.MM.yyyy\"\n                                        showMonthYearPicker={false}\n                                        value={selectedDateTo.toDate()}\n                                        handleChange={(newValue) => {\n                                            onChange(newValue);\n                                            updatePreviewField('dateTo', newValue);\n                                        }}\n                                    />\n                                )}\n                            />\n                            <Text\n                                text={'Додаткова інформація'}\n                                textClass=\"title-form\"\n                            />\n                            <Controller\n                                control={control}\n                                name=\"additionalInfo\"\n                                rules={{ required: false }}\n                                render={({ field: { onChange, value }, fieldState }) => (\n                                    <textarea\n                                        className={`${s.textarea} ${s.scroll}`}\n                                        value={value}\n                                        onChange={(e) => {\n                                            onChange(e.target.value);\n                                            updatePreviewField('additionalInfo', e.target.value);\n                                        }}\n                                        rows={3}\n                                        cols={40}\n                                    />\n                                )}\n                            />\n                            {isUserLogin &&\n                                <>\n                                    <Text\n                                        text={'Користувачі з яким ви хочете поділитися завданням'}\n                                        textClass=\"title-form\"\n                                    />\n                                    <div className={s.userListShow}>\n                                        <Text\n                                            text={selectedUsers.join(', ')}\n                                            textClass=\"hidenInputCreateTodo\"\n                                        />\n                                    </div>\n                                    <div className={s.addUserGroup}>\n                                        <div className={s.addUser} onClick={handleAddUsersClick}>\n                                            <FaPlus size={20} color='white' />\n                                        </div>\n                                        <Text\n                                            text={!showUsersList ? 'Додати користувачів' : 'Обрати користувачів'}\n                                            textClass=\"title-form-add-user\"\n                                        />\n                                    </div>\n                                    {showUsersList && <div className={s.modal}>\n                                        <div className={s.modalBorder}>\n                                            <button className={s.dismissButton} onClick={handleAddUsersClick}>\n                                                <FontAwesomeIcon icon={faTimes} size=\"lg\" color='white' />\n                                            </button>\n                                            <UserList\n                                                arrayUser={arrayUser}\n                                                selectedUsers={selectedUsers}\n                                                setSelectedUsers={setSelectedUsers}\n                                            />\n                                        </div>\n                                    </div>}\n                                </>}\n                            <Text\n                                text={'Зберігати завдання після закінчення терміну виконання'}\n                                textClass=\"title-form\"\n                            />\n                            <Controller\n                                control={control}\n                                name=\"saveAfterDeadline\"\n                                render={({ field: { onChange, value } }) => (\n                                    <div className={s.checkboxDiv}>\n                                        <input\n                                            type=\"checkbox\"\n                                            className={s.checkbox}\n                                            checked={value}\n                                            onChange={(e) => {\n                                                onChange(e.target.checked);\n                                                updatePreviewField('saveAfterDeadline', e.target.checked)\n                                            }}\n                                        />\n                                    </div>\n                                )}\n                            />\n                            <div className={s.btnPart}>\n                                <div className={s.wrap}>\n                                    <Button text=\"Створити\" btnClass=\"btnLight\" />\n                                </div>\n                                {isMobile && (<div className={s.wrap}>\n                                    <Button text=\"Перегляд\" btnClass=\"btnLight\" handleClick={handlePreviewButtonClick} type='button' />\n                                </div>)}\n                            </div>\n                        </form>\n                    </div>\n                {!isMobile && (<div className={s.preview}>\n                    <Todo {...previewData} />\n                </div>)}\n                {isMobile && isShowPreviewInMobile && (<div className={s.previewInMobile}>\n                    <Todo {...previewData} />\n                    <div className={s.btnReturn}>\n                        <Button text=\"Повернутися\" btnClass=\"btnLight\" handleClick={handlePreviewButtonClick} type='button' />\n                    </div>\n                </div>)}\n            </div>\n                {message && (\n                    <Message text={`${message}`} onDismiss={resetMessage} onChoice={synchronize} type=\"todo\" />\n                )}\n        </Container>\n    </section>\n);\n}\n\nexport default CreateTodo;","import CreateTodo from '../../components/CreateTodo';\n\nconst HomePage: React.FC = () => {\n\n  return (\n    <>\n      <CreateTodo/>\n    </>\n  );\n};\n\nexport default HomePage;\n"],"names":["searchLocalStoradge","searchData","_searchData$searchByP","lowerCaseSearchPhrase","searchByPhrase","toLowerCase","localStorageData","localStorage","getItem","currentDate","moment","filteredTasks","JSON","parse","filter","task","searchByDate","date","startDate","endDate","momentDate","momentStartDate","momentEndDate","isBetween","isDateInRange","dateFrom","dateTo","searchByPart","part","subject","includes","additionalInfo","searchByStatus","isBefore","isAfter","length","vpHeight","window","innerHeight","_useState","useState","_useState2","_slicedToArray","dynamicStyles","setDynamicStyles","dispatch","useAppDispatch","isUserLogin","useSelector","getLogin","arrayUser","getEmailList","options","getOptionMenu","message","getTodoMessage","stopResetMessage","getStopResetMessage","_useState3","_useState4","showUsersList","setShowUsersList","_useState5","_useState6","selectedUsers","setSelectedUsers","_useState7","_useState8","selectedDateFrom","setSelectedDateFrom","_useState9","_useState10","selectedDateTo","setSelectedDateTo","initialState","otherMembers","saveAfterDeadline","_useState11","_useState12","previewData","setPreviewData","_useState13","_useState14","isShowPreviewInMobile","setIsShowPreviewInMobile","_useState15","_useState16","todoToSynchronize","setTodoToSynchronize","isMobile","useMediaQuery","maxWidth","useEffect","fetchData","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","finalData","localStoradgeTodo","wrap","_context","prev","next","statusStopResetMessage","createMessageConfirmation","stop","apply","arguments","updatePreviewField","join","height","concat","fieldName","value","formattedValue","prevData","_objectSpread","_defineProperty","_useForm","useForm","defaultValues","label","control","handleSubmit","reset","onSubmit","_ref2","_callee2","data","existingTasks","_context2","push","_id","Date","getTime","toString","replace","Math","random","setItem","stringify","createTodo","_x","handleAddUsersClick","handlePreviewButtonClick","synchronize","_ref3","_callee3","choice","syncResonse","_context3","synchronizeTodo","sent","meta","requestStatus","clearTodoMessage","_x2","_jsx","className","s","style","children","_jsxs","Container","todoPart","create","form","Text","text","textClass","Controller","name","rules","required","render","_ref4","_ref4$field","field","onChange","fieldState","SelectField","handleChange","newValue","placeholder","_ref5","_ref5$field","TextField","e","target","error","fields","_ref6","Calendar","dateFormat","showMonthYearPicker","toDate","_ref7","_ref8","_ref8$field","textarea","scroll","rows","cols","_Fragment","userListShow","addUserGroup","addUser","onClick","FaPlus","size","color","modal","modalBorder","dismissButton","FontAwesomeIcon","icon","faTimes","UserList","_ref9","_ref9$field","checkboxDiv","type","checkbox","checked","btnPart","Button","btnClass","handleClick","preview","Todo","previewInMobile","btnReturn","Message","onDismiss","timeoutId","setTimeout","clearTimeout","onChoice","CreateTodo"],"sourceRoot":""}