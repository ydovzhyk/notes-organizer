{"version":3,"file":"static/js/917.a1509fb6.chunk.js","mappings":"6dACA,GAAgB,SAAW,2BAA2B,SAAW,2BAA2B,SAAW,2BAA2B,OAAS,yBAAyB,aAAe,+BAA+B,QAAU,0BAA0B,MAAQ,wBAAwB,YAAc,8BAA8B,cAAgB,gCAAgC,aAAe,+BAA+B,KAAO,uBAAuB,QAAU,0BAA0B,SAAW,2BAA2B,YAAc,8BAA8B,KAAO,uBAAuB,QAAU,0BAA0B,UAAY,4BAA4B,gBAAkB,mC,UCgdhrB,EA3a0C,SAAHA,GAAsB,IAAhBC,EAAQD,EAARC,SAEjCC,GAAOC,EAAAA,EAAAA,MAAPD,GACFE,EAAS,aACTC,EAAcC,MAASF,OAAO,cAE9BG,EAAWC,OAAOC,YACxBC,GAA0CC,EAAAA,EAAAA,UAAS,CAAC,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/CI,EAAaF,EAAA,GAAEG,EAAgBH,EAAA,GACtCI,GAA0DL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAlEE,EAAqBD,EAAA,GAAEE,EAAwBF,EAAA,GAChDG,GAAWC,EAAAA,EAAAA,eAAc,CAAEC,SAAU,MAE3CC,GAAsCZ,EAAAA,EAAAA,UAAiB,IAAGa,GAAAX,EAAAA,EAAAA,GAAAU,EAAA,GAAnDE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAClCG,GAAoChB,EAAAA,EAAAA,UAAiB,IAAGiB,GAAAf,EAAAA,EAAAA,GAAAc,EAAA,GAAjDE,EAAUD,EAAA,GAAEE,GAAaF,EAAA,GAE1BG,GAAe,CACjBC,eAAgB,GAChBC,SAAU5B,EACV6B,OAAQ7B,EACR8B,aAAc,GACdC,KAAM,GACNC,QAAS,GACTC,mBAAmB,GAGjBC,IAAWC,EAAAA,EAAAA,KACXC,IAAWC,EAAAA,EAAAA,MACXC,IAAcC,EAAAA,EAAAA,IAAYC,EAAAA,IAC1BC,IAAgBF,EAAAA,EAAAA,IAAYG,EAAAA,IAC5BC,IAAYJ,EAAAA,EAAAA,IAAYK,EAAAA,IACxBC,IAAUN,EAAAA,EAAAA,IAAYO,EAAAA,IACtBC,IAAUR,EAAAA,EAAAA,IAAYS,EAAAA,IAC5BC,IAA0C3C,EAAAA,EAAAA,WAAkB,GAAM4C,IAAA1C,EAAAA,EAAAA,GAAAyC,GAAA,GAA3DE,GAAaD,GAAA,GAAEE,GAAgBF,GAAA,GACtCG,IAA0C/C,EAAAA,EAAAA,UAAmB,IAAGgD,IAAA9C,EAAAA,EAAAA,GAAA6C,GAAA,GAAzDE,GAAaD,GAAA,GAAEE,GAAgBF,GAAA,GAEtCG,IAAgDnD,EAAAA,EAAAA,UAAiBL,IAAOD,EAAaD,IAAQ2D,IAAAlD,EAAAA,EAAAA,GAAAiD,GAAA,GAAtFE,GAAgBD,GAAA,GAAEE,GAAmBF,GAAA,GAC5CG,IAA4CvD,EAAAA,EAAAA,UAAiBL,IAAOD,EAAaD,IAAQ+D,IAAAtD,EAAAA,EAAAA,GAAAqD,GAAA,GAAlFE,GAAcD,GAAA,GAAEE,GAAiBF,GAAA,GAExCG,IAAsC3D,EAAAA,EAAAA,UAASoB,IAAawC,IAAA1D,EAAAA,EAAAA,GAAAyD,GAAA,GAArDE,GAAWD,GAAA,GAAEE,GAAcF,GAAA,GAElCG,IAAyCC,EAAAA,EAAAA,IAAqB,CAC1DC,cAAe,CACX5C,eAAgBwC,GAAYxC,eAC5BC,SAAUuC,GAAYvC,SACtBC,OAAQsC,GAAYtC,OACpBC,aAAcqC,GAAYrC,aAC1BC,KAAM,CAAEyC,MAAOL,GAAYpC,KAAM0C,MAAON,GAAYpC,MACpDC,QAASmC,GAAYnC,QACrBC,kBAAmBkC,GAAYlC,qBAR/ByC,GAAOL,GAAPK,QAASC,GAAYN,GAAZM,aAAcC,GAAKP,GAALO,OAY/BC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAiB,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOC,GAAS,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAChCpB,IAAcqB,EAAAA,EAAAA,GAAC,CAAC,EACfL,IACJ,KAAD,mBAAAE,EAAAI,OAAA,GAAAP,EAAA,KACL,gBAJsBQ,GAAA,OAAAZ,EAAAa,MAAA,KAAAC,UAAA,KAKnBjG,GAAYkG,OAAOC,KAAKnG,GAAUoG,OAAS,IAC3ClB,EAAkBlF,GAClBgF,GAAM,CACFjD,eAAgB/B,EAAS+B,eACzBC,SAAUhC,EAASgC,SACnBC,OAAQjC,EAASiC,OACjBC,aAAclC,EAASkC,aACvBC,KAAM,CAAEyC,MAAO5E,EAASmC,KAAM0C,MAAO7E,EAASmC,MAC9CC,QAASpC,EAASoC,QAClBC,kBAAmBrC,EAASqC,oBAEhC2B,GAAoB3D,IAAOL,EAASgC,SAAU7B,IAC9CiE,GAAkB/D,IAAOL,EAASiC,OAAQ9B,IAC1CyD,GAAiB,CAAC5D,EAASkC,eAC3BT,EAAezB,EAASmC,MACxBN,GAAc7B,EAASqG,OAEtBrG,GAAY6C,IAAiBqD,OAAOC,KAAKtD,IAAeuD,OAAS,IAClElB,EAAkBrC,IACd,QAASA,KACTmC,GAAM,CACFjD,eAAgBc,GAAcd,eAC9BC,SAAUa,GAAcb,SACxBC,OAAQY,GAAcZ,OACtBC,aAAcW,GAAcX,aAC5BC,KAAM,CAAEyC,MAAO/B,GAAcV,KAAM0C,MAAOhC,GAAcV,MACxDC,QAASS,GAAcT,QACvBC,kBAAmBQ,GAAcR,oBAErC2B,GAAoB3D,IAAOwC,GAAcb,SAAU7B,IACnDiE,GAAkB/D,IAAOwC,GAAcZ,OAAQ9B,IAC/CyD,GAAiB,CAACf,GAAcX,eAChCL,GAAcgB,GAAcwD,KAC5B5E,EAAeoB,GAAcV,OAIzC,GAAG,CAACU,GAAe7C,EAAUgF,MAE7BC,EAAAA,EAAAA,YAAU,WACNnE,EAAiB,CACbwF,OAAmB,GAAAC,OAAX7D,GAAiBpC,EAAW,GAAYA,EAAW,GAAK,GAA1B,OAE9C,GAAG,CAACoC,GAAapC,KAEjB2E,EAAAA,EAAAA,YAAU,WAWN,KAAKjF,IAAakG,OAAOC,KAAKnG,GAAUoG,UAChC1D,IAAezC,GACfqC,IAASkE,EAAAA,EAAAA,IAAYvG,KAEpByC,IAAezC,GAAI,CACpB,IAAMwG,EAfoB,WAC9B,IAAMC,EAAmBC,aAAaC,QAAQ,yBAC9C,OAAIF,EAC8BG,KAAKC,MAAMJ,GACUK,MAAK,SAACC,GAAiB,OAAKA,EAAKX,MAAQpG,CAAE,IAG3F,CAAC,CACZ,CAOqCgH,GAC7B3E,IAAS4E,EAAAA,EAAAA,IAAaT,GAC1B,CAER,GAAG,CAACzG,EAAUsC,GAAUrC,EAAIyC,MAE5BuC,EAAAA,EAAAA,YAAU,WACFtB,GAAcyC,OAAS,GACvBe,GAAmB,eAAgBxD,GAAcyD,KAAK,OAC3B,IAAzBzD,GAAcyC,QAChBe,GAAmB,eAAgB,GAE3C,GAAG,CAACxD,KAEJ,IAAMwD,GAAqB,SAACE,EAAmBzC,GAC3C,GAAkB,aAAdyC,EAA0B,CAC1B,IAAMC,EAAiBjH,IAAOuE,EAAO,cACrCZ,GAAoBsD,GACpB9C,IAAe,SAAC+C,GAAQ,OAAA1B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACjB0B,GAAQ,IAAAC,EAAAA,EAAAA,GAAA,GACVH,EAAYzC,GAAK,GAE1B,CAAE,GAAkB,WAAdyC,EAAwB,CAC1B,IAAMC,EAAiBjH,IAAOuE,EAAO,cACrCR,GAAkBkD,GAClB9C,IAAe,SAAC+C,GAAQ,OAAA1B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACjB0B,GAAQ,IAAAC,EAAAA,EAAAA,GAAA,GACVH,EAAYzC,GAAK,GAE1B,CACIJ,GADgB,SAAd6C,EACa,SAACE,GAAQ,OAAA1B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACjB0B,GAAQ,IAAAC,EAAAA,EAAAA,GAAA,GACVH,EAAYzC,EAAMA,OAAK,EAGb,SAAC2C,GAAQ,OAAA1B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACjB0B,GAAQ,IAAAC,EAAAA,EAAAA,GAAA,GACVH,EAAYzC,GAAK,EAG9B,EAIM6C,GAAQ,eAAAC,GAAAtC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAqC,EAAOnC,GAAiB,IAAAoC,EAAAC,EAAAC,EAAA,OAAAzC,EAAAA,EAAAA,KAAAI,MAAA,SAAAsC,GAAA,cAAAA,EAAApC,KAAAoC,EAAAnC,MAAA,OAUpC,GATKgC,EAAyB,CAC3BzF,KAAMqD,EAAKrD,KAAKyC,MAChBxC,QAASoD,EAAKpD,QACdJ,SAAUwD,EAAKxD,SACfC,OAAQuD,EAAKvD,OACbF,eAAgByD,EAAKzD,eACrBG,aAAcqC,GAAYrC,aAC1BG,kBAAmBmD,EAAKnD,kBACxBgE,IAAKzE,GAGJc,GAAY,CAADqF,EAAAnC,KAAA,SAE8E,GADpFiC,EAAgBhB,KAAKC,MAAMH,aAAaC,QAAQ,0BAA4B,OAG/D,KAFbkB,EAAYD,EAAcG,WAAU,SAACC,GAAiB,OAAKA,EAAK5B,MAAQzE,CAAU,KAEpE,CAAAmG,EAAAnC,KAAA,SAChBiC,EAAcC,IAAUjC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQgC,EAAcC,IAAeF,GAC7DjB,aAAauB,QAAQ,wBAAyBrB,KAAKsB,UAAUN,IAC7DvF,IAAS8F,EAAAA,EAAAA,IAA0B,6BAA6BL,EAAAnC,KAAA,wBAAAmC,EAAAM,OAAA,kBAAAN,EAAAnC,KAAA,wBAAAmC,EAAAnC,KAAA,GAK9DtD,IAASgG,EAAAA,EAAAA,IAASV,IAAY,KAAD,GAGvC5C,IAAKa,EAAAA,EAAAA,GAAC,CAAC,EACA/D,KAEP0B,IAAiB,GACjBI,GAAiB,IACjBI,GAAoB3D,OACpB+D,GAAkB/D,OAClBmE,GAAe1C,IACfL,EAAe,IACf8G,KAAiB,yBAAAR,EAAAjC,OAAA,GAAA6B,EAAA,KACpB,gBArCaa,GAAA,OAAAd,EAAA1B,MAAA,KAAAC,UAAA,KAuCRwC,GAAsB,WAIpBjF,IAHCD,GAKT,EASMgF,GAAiB,WACnB,IAAMG,EAAYC,YAAW,WACzBnG,GAAS,QACb,GAAG,KACH,OAAO,kBAAMoG,aAAaF,EAAW,CACzC,EAEMG,GAA2B,WAC7B3H,GAA0BD,EAC9B,EAEA,OACA6H,EAAAA,EAAAA,KAAA,WAASC,UAAWC,EAAEV,SAAUW,MAAOpI,EAAcqI,UACjDC,EAAAA,EAAAA,MAACC,EAAAA,EAAS,CAAAF,SAAA,EACNC,EAAAA,EAAAA,MAAA,OAAKJ,UAAWC,EAAEK,SAASH,SAAA,EACvBJ,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEM,KAAKJ,UACnBC,EAAAA,EAAAA,MAAA,QAAMJ,UAAWC,EAAEO,KAAM9B,SAAU1C,GAAa0C,IAAUyB,SAAA,EACtDJ,EAAAA,EAAAA,KAACU,EAAAA,EAAI,CACDC,KAAM,uCACNC,UAAU,gBAEdZ,EAAAA,EAAAA,KAACa,EAAAA,GAAU,CACP7E,QAASA,GACT8E,KAAK,OACLC,MAAO,CAAEC,UAAU,GACnBC,OAAQ,SAAAC,GAAA,IAAAC,EAAAD,EAAGE,MAAQC,EAAQF,EAARE,SAAUvF,EAAKqF,EAALrF,MAAkBoF,EAAVI,WAAU,OAC/CtB,EAAAA,EAAAA,KAACuB,EAAAA,EAAW,CACRzF,MAAOA,EACP0F,aAAc,SAACC,GACXJ,EAASI,GACTpD,GAAmB,OAAQoD,EAC/B,EACAX,KAAK,OACLb,UAAU,aACVyB,YAAahJ,EACbsI,UAAU,EACV7G,QAASA,GACTwH,aAAc,CACV7F,MAAOpD,EACPqD,MAAOrD,IAEb,KAGNsH,EAAAA,EAAAA,KAACU,EAAAA,EAAI,CACDC,KAAM,2BACNC,UAAU,gBAEdZ,EAAAA,EAAAA,KAACa,EAAAA,GAAU,CACP7E,QAASA,GACT8E,KAAK,UACLC,MAAO,CAAEC,UAAU,GACnBC,OAAQ,SAAAW,GAAA,IAAAC,EAAAD,EAAGR,MAASC,EAAQQ,EAARR,SAAUvF,EAAK+F,EAAL/F,MAASwF,EAAUM,EAAVN,WAAU,OACjDtB,EAAAA,EAAAA,KAAC8B,EAAAA,GAAS/E,EAAAA,EAAAA,GAAA,CACNjB,MAAOA,EACPE,QAASA,GACTiE,UAAU,aACVuB,aAAc,SAACO,GACX,IAAMN,EAAWM,EAAEC,OAAOlG,MAC1BuF,EAASI,GACTpD,GAAmB,UAAWoD,EAC9B,EACJQ,MAAOX,EAAWW,OACdC,EAAAA,EAAO5I,SACb,KAGN0G,EAAAA,EAAAA,KAACU,EAAAA,EAAI,CACDC,KAAM,sEACNC,UAAU,gBAEdZ,EAAAA,EAAAA,KAACa,EAAAA,GAAU,CACP7E,QAASA,GACT8E,KAAK,WACLC,MAAO,CAAEC,UAAU,GACnBC,OAAQ,SAAAkB,GAAA,IAAWd,EAAQc,EAAhBf,MAAQC,SAAQ,OAC3BrB,EAAAA,EAAAA,KAACoC,EAAAA,EAAQ,CACLC,WAAW,aACXC,qBAAqB,EACrBxG,MAAOb,GAAiBsH,SACxBf,aAAc,SAACC,GACXJ,EAASI,GACTpD,GAAmB,WAAYoD,EACnC,GACF,KAGNzB,EAAAA,EAAAA,KAACU,EAAAA,EAAI,CACDC,KAAM,wFACNC,UAAU,gBAEdZ,EAAAA,EAAAA,KAACa,EAAAA,GAAU,CACP7E,QAASA,GACT8E,KAAK,SACLC,MAAO,CAAEC,UAAU,GACnBC,OAAQ,SAAAuB,GAAA,IAAWnB,EAAQmB,EAAhBpB,MAAQC,SAAQ,OAC3BrB,EAAAA,EAAAA,KAACoC,EAAAA,EAAQ,CACLC,WAAW,aACXC,qBAAqB,EACrBxG,MAAOT,GAAekH,SACtBf,aAAc,SAACC,GACXJ,EAASI,GACTpD,GAAmB,SAAUoD,EACjC,GACF,KAGNzB,EAAAA,EAAAA,KAACU,EAAAA,EAAI,CACDC,KAAM,sHACNC,UAAU,gBAEdZ,EAAAA,EAAAA,KAACa,EAAAA,GAAU,CACP7E,QAASA,GACT8E,KAAK,iBACLC,MAAO,CAAEC,UAAU,GACnBC,OAAQ,SAAAwB,GAAA,IAAAC,EAAAD,EAAGrB,MAAQC,EAAQqB,EAARrB,SAAUvF,EAAK4G,EAAL5G,MAAkB2G,EAAVnB,WAAU,OAC/CtB,EAAAA,EAAAA,KAAA,YACIC,UAAS,GAAAxC,OAAKyC,EAAEyC,SAAQ,KAAAlF,OAAIyC,EAAE0C,QAC9B9G,MAAOA,EACPuF,SAAU,SAACU,GACPV,EAASU,EAAEC,OAAOlG,OAClBuC,GAAmB,iBAAkB0D,EAAEC,OAAOlG,MAClD,EACA+G,KAAM,EACNC,KAAM,IACR,IAGDlJ,KACGyG,EAAAA,EAAAA,MAAA0C,EAAAA,SAAA,CAAA3C,SAAA,EACRJ,EAAAA,EAAAA,KAACU,EAAAA,EAAI,CACDC,KAAM,2QACNC,UAAU,gBAEdZ,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAE8C,aAAa5C,UAC3BJ,EAAAA,EAAAA,KAACU,EAAAA,EAAI,CACDC,KAAM9F,GAAcyD,KAAK,MACzBsC,UAAU,4BAGlBP,EAAAA,EAAAA,MAAA,OAAKJ,UAAWC,EAAE+C,aAAa7C,SAAA,EAC3BJ,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEgD,QAASC,QAASxD,GAAoBS,UACpDJ,EAAAA,EAAAA,KAACoD,EAAAA,IAAM,CAACC,KAAM,GAAIC,MAAM,aAE5BtD,EAAAA,EAAAA,KAACU,EAAAA,EAAI,CACDC,KAAOlG,GAAwC,gHAAxB,gHACvBmG,UAAU,2BAGbnG,KAAiBuF,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEqD,MAAMnD,UACtCC,EAAAA,EAAAA,MAAA,OAAKJ,UAAWC,EAAEsD,YAAYpD,SAAA,EAC1BJ,EAAAA,EAAAA,KAAA,UAAQC,UAAWC,EAAEuD,cAAeN,QAASxD,GAAqBS,UAC9DJ,EAAAA,EAAAA,KAAC0D,EAAAA,EAAe,CAACC,KAAMC,EAAAA,IAASP,KAAK,KAAKC,MAAM,aAEpDtD,EAAAA,EAAAA,KAAC6D,EAAAA,EAAQ,CACL5J,UAAWA,GACXY,cAAeA,GACfC,iBAAkBA,cAKlCkF,EAAAA,EAAAA,KAACU,EAAAA,EAAI,CACDC,KAAM,wSACNC,UAAU,gBAEdZ,EAAAA,EAAAA,KAACa,EAAAA,GAAU,CACP7E,QAASA,GACT8E,KAAK,oBACLG,OAAQ,SAAA6C,GAAA,IAAAC,EAAAD,EAAG1C,MAASC,EAAQ0C,EAAR1C,SAAUvF,EAAKiI,EAALjI,MAAK,OACnCkE,EAAAA,EAAAA,KAAA,OAAAI,UACIJ,EAAAA,EAAAA,KAAA,SACIgE,KAAK,WACL/D,UAAWC,EAAE+D,SACbC,QAASpI,EACTuF,SAAU,SAACU,GACPV,EAASU,EAAEC,OAAOkC,SAClB7F,GAAmB,oBAAqB0D,EAAEC,OAAOkC,QACrD,KAEF,KAGV7D,EAAAA,EAAAA,MAAA,OAAKJ,UAAWC,EAAEiE,QAAQ/D,SAAA,EACtBJ,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEvD,KAAKyD,UACnBJ,EAAAA,EAAAA,KAACoE,EAAAA,EAAM,CAACzD,KAAK,kFAAiB0D,SAAS,eAEtChM,IAAa2H,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEvD,KAAKyD,UACjCJ,EAAAA,EAAAA,KAACoE,EAAAA,EAAM,CAACzD,KAAK,mDAAW0D,SAAS,WAAWC,YAAavE,GAA0BiE,KAAK,sBAK1G3L,IAAa2H,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEqE,QAAQnE,UACrCJ,EAAAA,EAAAA,KAACwE,EAAAA,GAAIzH,EAAAA,EAAAA,GAAA,GAAKtB,OAEbpD,GAAYF,IAA0BkI,EAAAA,EAAAA,MAAA,OAAKJ,UAAWC,EAAEuE,gBAAgBrE,SAAA,EACrEJ,EAAAA,EAAAA,KAACwE,EAAAA,GAAIzH,EAAAA,EAAAA,GAAA,GAAKtB,MACVuE,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEwE,UAAUtE,UACxBJ,EAAAA,EAAAA,KAACoE,EAAAA,EAAM,CAACzD,KAAK,qEAAc0D,SAAS,WAAWC,YAAavE,GAA0BiE,KAAK,mBAItG3J,KACG2F,EAAAA,EAAAA,KAAC2E,EAAAA,EAAO,CAAChE,KAAI,GAAAlD,OAAKpD,IAAWuK,UAnNpB,WACjB,IAAMhF,EAAYC,YAAW,WACzBrG,IAASqL,EAAAA,EAAAA,MACb,GAAG,KACH,OAAO,kBAAM/E,aAAaF,EAAW,CACzC,EA8MkEoE,KAAK,aAK3E,ECtbA,EAnB2B,WAEvB,IAAMpK,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,IAE1B5C,GADW4N,EAAAA,EAAAA,MACSC,MAE1B,OACI1E,EAAAA,EAAAA,MAAA0C,EAAAA,SAAA,CAAA3C,SAAA,EACExG,IACEoG,EAAAA,EAAAA,KAACU,EAAAA,EAAI,CACDC,KAAM,iYACNC,UAAU,kBAGlBZ,EAAAA,EAAAA,KAACgF,EAAQ,CAAC9N,SAAUA,MAG5B,C","sources":["webpack://notes-organizer/./src/components/EditTodo/EditTodo.module.scss?c2ba","components/EditTodo/EditTodo.tsx","pages/EditPage/EditPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"editTodo\":\"EditTodo_editTodo__AXezh\",\"todoPart\":\"EditTodo_todoPart__mI6Cn\",\"textarea\":\"EditTodo_textarea__AvvZ0\",\"scroll\":\"EditTodo_scroll__Gc7OP\",\"addUserGroup\":\"EditTodo_addUserGroup__wBn+W\",\"addUser\":\"EditTodo_addUser__a3Cq3\",\"modal\":\"EditTodo_modal__VUhBN\",\"modalBorder\":\"EditTodo_modalBorder__TklCT\",\"dismissButton\":\"EditTodo_dismissButton__dXz+4\",\"userListShow\":\"EditTodo_userListShow__41-p2\",\"edit\":\"EditTodo_edit__6cZZD\",\"preview\":\"EditTodo_preview__4Vha-\",\"checkbox\":\"EditTodo_checkbox__g7fe+\",\"checkboxDiv\":\"EditTodo_checkboxDiv__aJLli\",\"wrap\":\"EditTodo_wrap__IYppw\",\"btnPart\":\"EditTodo_btnPart__qNEVo\",\"btnReturn\":\"EditTodo_btnReturn__aOV6E\",\"previewInMobile\":\"EditTodo_previewInMobile__umgSh\"};","import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useNavigate } from 'react-router-dom';\nimport { useParams } from 'react-router-dom';\nimport moment, { Moment } from 'moment';\nimport { useAppDispatch } from '../../hooks/hooks';\nimport { useMediaQuery } from 'react-responsive';\nimport { editTodo } from '../../Redux/todo/todo-operations';\nimport { getLogin } from '../../Redux/auth/auth-selectors';\nimport { getEditTodo } from '../../Redux/todo/todo-operations';\nimport { getEditTodoStore } from '../../Redux/todo/todo-selectors';\nimport { getTodoMessage } from '../../Redux/todo/todo-selectors'\nimport { clearTodoMessage, createMessageConfirmation, saveEditTodo } from '../../Redux/todo/todo-slice';\nimport { getEmailList } from '../../Redux/technical/technical-selectors';\nimport { getOptionMenu } from '../../Redux/technical/technical-selectors';\nimport Container from '../Shared/Container';\nimport Calendar from '../Shared/Calendar';\nimport SelectField from '../Shared/SelectField';\nimport Button from '../Shared/Button';\nimport Text from '../Shared/Text';\nimport TextField from '../Shared/TextField';\nimport UserList from '../../components/CreateTodo/UserList';\nimport Todo from '../Todo/Todo';\nimport Message from '../Shared/Message';\nimport { fields } from '../Shared/TextField/fields'\nimport { ITodoCreate } from '../types/todo/todo';\nimport { FaPlus } from 'react-icons/fa';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { ITodoPrewievProps } from '../TodoPreview/TodoPreview';\n\nimport s from './EditTodo.module.scss';\n\ninterface EditTodoProps {\n    todoData: ITodoPrewievProps;\n}\n\nconst EditTodo: React.FC<EditTodoProps> = ({ todoData }) => {\n\n    const { id } = useParams();\n    const format = \"DD.MM.YYYY\";\n    const currentDate = moment().format('DD.MM.YYYY');\n\n    const vpHeight = window.innerHeight;\n    const [dynamicStyles, setDynamicStyles] = useState({});\n    const [isShowPreviewInMobile, setIsShowPreviewInMobile] = useState(false);\n    const isMobile = useMediaQuery({ maxWidth: 767 });\n\n    const [partInitial, setPartInitial] = useState<string>('');\n    const [_idInitial, set_idInitial] = useState<string>('');\n\n    const initialState = {\n        additionalInfo: '',\n        dateFrom: currentDate,\n        dateTo: currentDate,\n        otherMembers: '',\n        part: '',\n        subject: '',\n        saveAfterDeadline: false,\n    }\n\n    const dispatch = useAppDispatch();\n    const navigate = useNavigate();\n    const isUserLogin = useSelector(getLogin);\n    const editTodoStore = useSelector(getEditTodoStore);\n    const arrayUser = useSelector(getEmailList);\n    const options = useSelector(getOptionMenu);\n    const message = useSelector(getTodoMessage);\n    const [showUsersList, setShowUsersList] = useState<boolean>(false);\n    const [selectedUsers, setSelectedUsers] = useState<string[]>([]);\n    \n    const [selectedDateFrom, setSelectedDateFrom] = useState<Moment>(moment(currentDate, format));\n    const [selectedDateTo, setSelectedDateTo] = useState<Moment>(moment(currentDate, format));\n    \n    const [previewData, setPreviewData] = useState(initialState);\n\n    const { control, handleSubmit, reset } = useForm<ITodoCreate>({\n        defaultValues: {\n            additionalInfo: previewData.additionalInfo,\n            dateFrom: previewData.dateFrom,\n            dateTo: previewData.dateTo,\n            otherMembers: previewData.otherMembers,\n            part: { value: previewData.part, label: previewData.part },\n            subject: previewData.subject,\n            saveAfterDeadline: previewData.saveAfterDeadline,\n        },\n    });\n\n    useEffect(() => {\n        const updatePreviewData = async (data: any) => {\n            await setPreviewData({\n                ...data,\n            });\n        }\n        if (todoData && Object.keys(todoData).length > 0) {\n            updatePreviewData(todoData);\n            reset({\n                additionalInfo: todoData.additionalInfo,\n                dateFrom: todoData.dateFrom,\n                dateTo: todoData.dateTo,\n                otherMembers: todoData.otherMembers,\n                part: { value: todoData.part, label: todoData.part },\n                subject: todoData.subject,\n                saveAfterDeadline: todoData.saveAfterDeadline,\n            });\n            setSelectedDateFrom(moment(todoData.dateFrom, format));\n            setSelectedDateTo(moment(todoData.dateTo, format));\n            setSelectedUsers([todoData.otherMembers]);\n            setPartInitial(todoData.part);\n            set_idInitial(todoData._id);\n        }\n        if (!todoData && editTodoStore && Object.keys(editTodoStore).length > 0) {\n            updatePreviewData(editTodoStore);\n            if ('_id' in editTodoStore) {\n                reset({\n                    additionalInfo: editTodoStore.additionalInfo,\n                    dateFrom: editTodoStore.dateFrom,\n                    dateTo: editTodoStore.dateTo,\n                    otherMembers: editTodoStore.otherMembers,\n                    part: { value: editTodoStore.part, label: editTodoStore.part },\n                    subject: editTodoStore.subject,\n                    saveAfterDeadline: editTodoStore.saveAfterDeadline,\n                });\n                setSelectedDateFrom(moment(editTodoStore.dateFrom, format));\n                setSelectedDateTo(moment(editTodoStore.dateTo, format));\n                setSelectedUsers([editTodoStore.otherMembers]);\n                set_idInitial(editTodoStore._id);\n                setPartInitial(editTodoStore.part);\n            }\n        }\n\n    }, [editTodoStore, todoData, reset]);\n\n    useEffect(() => {\n        setDynamicStyles({\n            height: isUserLogin ? `${vpHeight - 64}px` : `${vpHeight - 64 - 39}px`,\n        });\n    }, [isUserLogin, vpHeight]);\n\n    useEffect(() => {\n        const fetchTodoFromLocalStorage = () => {\n            const localStorageData = localStorage.getItem('notes-organizer_tasks');\n            if (localStorageData) {\n                const tasksFromLocalStorage = JSON.parse(localStorageData);\n                const todoFromLocalStorage = tasksFromLocalStorage.find((todo: ITodoCreate) => todo._id === id);\n                return todoFromLocalStorage;\n            }\n            return {};\n        };\n\n        if (!todoData || !Object.keys(todoData).length) {\n            if (isUserLogin && id) {\n                dispatch(getEditTodo(id));\n            }\n            if (!isUserLogin && id) {\n                const editTodoLocalStorage = fetchTodoFromLocalStorage();\n                dispatch(saveEditTodo(editTodoLocalStorage));\n            }\n        } \n    }, [todoData, dispatch, id, isUserLogin]);\n\n    useEffect(() => {\n        if (selectedUsers.length > 0) {\n            updatePreviewField('otherMembers', selectedUsers.join(', '));\n        } if (selectedUsers.length === 0) {\n            updatePreviewField('otherMembers', '');\n        }\n    }, [selectedUsers]);\n\n    const updatePreviewField = (fieldName: string, value: any) => {\n        if (fieldName === 'dateFrom') {\n            const formattedValue = moment(value, 'DD.MM.YYYY');\n            setSelectedDateFrom(formattedValue);\n            setPreviewData((prevData) => ({\n                ...prevData,\n                [fieldName]: value,\n            }));\n        } if (fieldName === 'dateTo') {\n            const formattedValue = moment(value, 'DD.MM.YYYY');\n            setSelectedDateTo(formattedValue);\n            setPreviewData((prevData) => ({\n                ...prevData,\n                [fieldName]: value,\n            }));\n        } if (fieldName === 'part') {\n            setPreviewData((prevData) => ({\n                ...prevData,\n                [fieldName]: value.value,\n            }));\n        } else {\n            setPreviewData((prevData) => ({\n                ...prevData,\n                [fieldName]: value,\n            }));\n        }\n    };\n\n    \n\n    const onSubmit = async (data: ITodoCreate) => {\n        const finalData: ITodoCreate = {\n            part: data.part.value,\n            subject: data.subject,\n            dateFrom: data.dateFrom,\n            dateTo: data.dateTo,\n            additionalInfo: data.additionalInfo,\n            otherMembers: previewData.otherMembers,\n            saveAfterDeadline: data.saveAfterDeadline,\n            _id: _idInitial,\n        }\n\n        if (!isUserLogin) {\n            const existingTasks = JSON.parse(localStorage.getItem('notes-organizer_tasks') || '[]');\n            const taskIndex = existingTasks.findIndex((task: ITodoCreate) => task._id === _idInitial);\n\n            if (taskIndex !== -1) {\n                existingTasks[taskIndex] = { ...existingTasks[taskIndex], ...finalData };\n                localStorage.setItem('notes-organizer_tasks', JSON.stringify(existingTasks));\n                dispatch(createMessageConfirmation(\"Todo edited successfully\"));\n            } else {\n                return;\n            }\n        } else {\n            await dispatch(editTodo(finalData));\n        }\n\n        reset({\n            ...initialState\n        });\n        setShowUsersList(false);\n        setSelectedUsers([]);\n        setSelectedDateFrom(moment());\n        setSelectedDateTo(moment());\n        setPreviewData(initialState);\n        setPartInitial('');\n        naviagteToList();\n    };\n\n    const handleAddUsersClick = () => {\n        if (!showUsersList) {\n            setShowUsersList(true);\n        } else {\n            setShowUsersList(false);\n        }\n    };\n\n    const resetMessage = () => {\n        const timeoutId = setTimeout(() => {\n            dispatch(clearTodoMessage());\n        }, 10000);\n        return () => clearTimeout(timeoutId);\n    };\n\n    const naviagteToList = () => {\n        const timeoutId = setTimeout(() => {\n            navigate('/list');\n        }, 10000);\n        return () => clearTimeout(timeoutId);\n    };\n\n    const handlePreviewButtonClick = () => {\n        setIsShowPreviewInMobile(!isShowPreviewInMobile);\n    };\n\n    return (\n    <section className={s.editTodo} style={dynamicStyles}>\n        <Container>\n            <div className={s.todoPart}>\n                <div className={s.edit}>\n                    <form className={s.form} onSubmit={handleSubmit(onSubmit)}>\n                        <Text\n                            text={'Розділ'}\n                            textClass=\"title-form\"\n                        />\n                        <Controller\n                            control={control}\n                            name=\"part\"\n                            rules={{ required: true }}\n                            render={({ field: {onChange, value}, fieldState }) => (\n                            <SelectField\n                                value={value}\n                                handleChange={(newValue) => {\n                                    onChange(newValue);\n                                    updatePreviewField('part', newValue);\n                                }}\n                                name=\"part\"\n                                className=\"createTodo\"\n                                placeholder={partInitial}\n                                required={true}\n                                options={options}\n                                defaultValue={{\n                                    value: partInitial,\n                                    label: partInitial,\n                                }}\n                            />\n                            )}\n                        />\n                        <Text\n                            text={'Тема'}\n                            textClass=\"title-form\"\n                        />\n                        <Controller\n                            control={control}\n                            name=\"subject\"\n                            rules={{ required: true}}\n                            render={({ field: { onChange, value }, fieldState }) => (\n                            <TextField\n                                value={value}\n                                control={control}\n                                className=\"createTodo\"\n                                handleChange={(e) => {\n                                    const newValue = e.target.value;\n                                    onChange(newValue);\n                                    updatePreviewField('subject', newValue);\n                                    }}\n                                error={fieldState.error}\n                                {...fields.subject}\n                            />\n                            )}\n                        />\n                        <Text\n                            text={'Дата початку'}\n                            textClass=\"title-form\"\n                        />\n                        <Controller\n                            control={control}\n                            name=\"dateFrom\"\n                            rules={{ required: true}}\n                            render={({ field: {onChange}}) => (\n                            <Calendar\n                                dateFormat=\"dd.MM.yyyy\" \n                                showMonthYearPicker={false} \n                                value={selectedDateFrom.toDate()} \n                                handleChange={(newValue) => {\n                                    onChange(newValue);\n                                    updatePreviewField('dateFrom', newValue);\n                                }}\n                            />\n                            )}\n                        />\n                        <Text\n                            text={'Дата завершення'}\n                            textClass=\"title-form\"\n                        />\n                        <Controller\n                            control={control}\n                            name=\"dateTo\"\n                            rules={{ required: true}}\n                            render={({ field: {onChange}}) => (\n                            <Calendar\n                                dateFormat=\"dd.MM.yyyy\" \n                                showMonthYearPicker={false} \n                                value={selectedDateTo.toDate()} \n                                handleChange={(newValue) => {\n                                    onChange(newValue);\n                                    updatePreviewField('dateTo', newValue);\n                                }}\n                            />\n                            )}\n                        />\n                        <Text\n                            text={'Додаткова інформація'}\n                            textClass=\"title-form\"\n                        />\n                        <Controller\n                            control={control}\n                            name=\"additionalInfo\"\n                            rules={{ required: false}}\n                            render={({ field: {onChange, value}, fieldState }) => (\n                            <textarea\n                                className={`${s.textarea} ${s.scroll}`}\n                                value={value}\n                                onChange={(e) => {\n                                    onChange(e.target.value);\n                                    updatePreviewField('additionalInfo', e.target.value);\n                                }}\n                                rows={3}\n                                cols={40}\n                            />\n                            )}\n                        />\n                            {isUserLogin && \n                                <>\n                        <Text\n                            text={'Користувачі з яким ви хочете поділитися завданням'}\n                            textClass=\"title-form\"\n                        />\n                        <div className={s.userListShow}>\n                            <Text\n                                text={selectedUsers.join(', ')}\n                                textClass=\"hidenInputCreateTodo\"\n                            />\n                        </div>\n                        <div className={s.addUserGroup}> \n                            <div className={s.addUser} onClick={handleAddUsersClick}>   \n                                <FaPlus size={20} color='white' /> \n                            </div>  \n                            <Text\n                                text={!showUsersList ? 'Додати користувачів' : 'Обрати користувачів'}\n                                textClass=\"title-form-add-user\"\n                            /> \n                        </div>\n                            {showUsersList && <div className={s.modal}>\n                                <div className={s.modalBorder}>\n                                    <button className={s.dismissButton} onClick={handleAddUsersClick }>\n                                        <FontAwesomeIcon icon={faTimes} size=\"lg\" color='white' />\n                                    </button>\n                                    <UserList\n                                        arrayUser={arrayUser}\n                                        selectedUsers={selectedUsers}\n                                        setSelectedUsers={setSelectedUsers}\n                                    />\n                                </div>\n                            </div>}\n                            </>}  \n                        <Text\n                            text={'Зберігати завдання після закінчення терміну виконання'}\n                            textClass=\"title-form\"\n                        />\n                        <Controller\n                            control={control}\n                            name=\"saveAfterDeadline\"\n                            render={({ field: { onChange, value } }) => (\n                            <div>\n                                <input\n                                    type=\"checkbox\"\n                                    className={s.checkbox}\n                                    checked={value}\n                                    onChange={(e) => {\n                                        onChange(e.target.checked);\n                                        updatePreviewField('saveAfterDeadline', e.target.checked)\n                                    }}\n                                />\n                            </div>\n                            )}\n                        />\n                        <div className={s.btnPart}>\n                            <div className={s.wrap}>\n                                <Button text=\"Зберегти зміни\" btnClass=\"btnLight\" />\n                            </div>\n                                {isMobile && (<div className={s.wrap}>\n                                    <Button text=\"Перегляд\" btnClass=\"btnLight\" handleClick={handlePreviewButtonClick} type='button' />\n                            </div>)}\n                        </div>\n                    </form>\n                </div>\n                {!isMobile && (<div className={s.preview}>\n                    <Todo {...previewData} />\n                </div>)}\n                {isMobile && isShowPreviewInMobile && (<div className={s.previewInMobile}>\n                    <Todo {...previewData} />\n                    <div className={s.btnReturn}>\n                        <Button text=\"Повернутися\" btnClass=\"btnLight\" handleClick={handlePreviewButtonClick} type='button' />\n                    </div>\n                </div>)}\n            </div>\n            {message && (\n                <Message text={`${message}`} onDismiss={resetMessage} type=\"todo\" />\n            )}\n        </Container>\n    </section>\n    );\n}\n\nexport default EditTodo;","import { useSelector } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport { getLogin } from '../../Redux/auth/auth-selectors';\nimport Text from '../../components/Shared/Text';\nimport EditTodo from '../../components/EditTodo/EditTodo';\n\nconst EditPage: React.FC = () => {\n\n    const isUserLogin = useSelector(getLogin);\n    const location = useLocation();\n    const todoData = location.state;\n\n    return (\n        <>\n        {!isUserLogin && (\n            <Text\n                text={'Зареєструйтесь, щоб отримати доступ до ваших завдань на різних пристроях'}\n                textClass=\"catalogTitle\"\n            />\n        )}\n        <EditTodo todoData={todoData} />\n        </>\n    );\n};\n\nexport default EditPage;"],"names":["_ref","todoData","id","useParams","format","currentDate","moment","vpHeight","window","innerHeight","_useState","useState","_useState2","_slicedToArray","dynamicStyles","setDynamicStyles","_useState3","_useState4","isShowPreviewInMobile","setIsShowPreviewInMobile","isMobile","useMediaQuery","maxWidth","_useState5","_useState6","partInitial","setPartInitial","_useState7","_useState8","_idInitial","set_idInitial","initialState","additionalInfo","dateFrom","dateTo","otherMembers","part","subject","saveAfterDeadline","dispatch","useAppDispatch","navigate","useNavigate","isUserLogin","useSelector","getLogin","editTodoStore","getEditTodoStore","arrayUser","getEmailList","options","getOptionMenu","message","getTodoMessage","_useState9","_useState10","showUsersList","setShowUsersList","_useState11","_useState12","selectedUsers","setSelectedUsers","_useState13","_useState14","selectedDateFrom","setSelectedDateFrom","_useState15","_useState16","selectedDateTo","setSelectedDateTo","_useState17","_useState18","previewData","setPreviewData","_useForm","useForm","defaultValues","value","label","control","handleSubmit","reset","useEffect","updatePreviewData","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","wrap","_context","prev","next","_objectSpread","stop","_x","apply","arguments","Object","keys","length","_id","height","concat","getEditTodo","editTodoLocalStorage","localStorageData","localStorage","getItem","JSON","parse","find","todo","fetchTodoFromLocalStorage","saveEditTodo","updatePreviewField","join","fieldName","formattedValue","prevData","_defineProperty","onSubmit","_ref3","_callee2","finalData","existingTasks","taskIndex","_context2","findIndex","task","setItem","stringify","createMessageConfirmation","abrupt","editTodo","naviagteToList","_x2","handleAddUsersClick","timeoutId","setTimeout","clearTimeout","handlePreviewButtonClick","_jsx","className","s","style","children","_jsxs","Container","todoPart","edit","form","Text","text","textClass","Controller","name","rules","required","render","_ref4","_ref4$field","field","onChange","fieldState","SelectField","handleChange","newValue","placeholder","defaultValue","_ref5","_ref5$field","TextField","e","target","error","fields","_ref6","Calendar","dateFormat","showMonthYearPicker","toDate","_ref7","_ref8","_ref8$field","textarea","scroll","rows","cols","_Fragment","userListShow","addUserGroup","addUser","onClick","FaPlus","size","color","modal","modalBorder","dismissButton","FontAwesomeIcon","icon","faTimes","UserList","_ref9","_ref9$field","type","checkbox","checked","btnPart","Button","btnClass","handleClick","preview","Todo","previewInMobile","btnReturn","Message","onDismiss","clearTodoMessage","useLocation","state","EditTodo"],"sourceRoot":""}