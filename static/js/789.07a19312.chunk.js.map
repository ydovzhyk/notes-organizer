{"version":3,"file":"static/js/789.07a19312.chunk.js","mappings":"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","sources":["webpack://notes-organizer/./src/components/EditTodo/EditTodo.module.scss?d726","components/EditTodo/EditTodo.tsx","pages/EditPage/EditPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"todoPart\":\"EditTodo_todoPart__mI6Cn\",\"textarea\":\"EditTodo_textarea__AvvZ0\",\"scroll\":\"EditTodo_scroll__Gc7OP\",\"addUserGroup\":\"EditTodo_addUserGroup__wBn+W\",\"addUser\":\"EditTodo_addUser__a3Cq3\",\"modal\":\"EditTodo_modal__VUhBN\",\"modalBorder\":\"EditTodo_modalBorder__TklCT\",\"dismissButton\":\"EditTodo_dismissButton__dXz+4\",\"userListShow\":\"EditTodo_userListShow__41-p2\",\"forum\":\"EditTodo_forum__4Asc-\",\"preview\":\"EditTodo_preview__4Vha-\",\"checkbox\":\"EditTodo_checkbox__g7fe+\",\"checkboxDiv\":\"EditTodo_checkboxDiv__aJLli\",\"wrap\":\"EditTodo_wrap__IYppw\",\"btnPart\":\"EditTodo_btnPart__qNEVo\",\"btnReturn\":\"EditTodo_btnReturn__aOV6E\",\"previewInMobile\":\"EditTodo_previewInMobile__umgSh\"};","import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useNavigate } from 'react-router-dom';\nimport { useParams } from 'react-router-dom';\nimport moment, { Moment } from 'moment';\nimport { useAppDispatch } from '../../hooks/hooks';\nimport { useMediaQuery } from 'react-responsive';\nimport { editTodo } from '../../Redux/todo/todo-operations';\nimport { getLogin } from '../../Redux/auth/auth-selectors';\nimport { getEditTodo } from '../../Redux/todo/todo-operations';\nimport { getEditTodoStore } from '../../Redux/todo/todo-selectors';\nimport { getTodoMessage } from '../../Redux/todo/todo-selectors';\nimport {\n  clearTodoMessage,\n  createMessageConfirmation,\n  saveEditTodo,\n} from '../../Redux/todo/todo-slice';\nimport { getEmailList } from '../../Redux/technical/technical-selectors';\nimport { getOptionMenu } from '../../Redux/technical/technical-selectors';\nimport Container from '../Shared/Container';\nimport Calendar from '../Shared/Calendar';\nimport SelectField from '../Shared/SelectField';\nimport Button from '../Shared/Button';\nimport Text from '../Shared/Text';\nimport TextField from '../Shared/TextField';\nimport UserList from '../../components/CreateTodo/UserList';\nimport Todo from '../Todo/Todo';\nimport Message from '../Shared/Message';\nimport { fields } from '../Shared/TextField/fields';\nimport { ITodoCreate } from '../types/todo/todo';\nimport { FaPlus } from 'react-icons/fa';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { ITodoPrewievProps } from '../TodoPreview/TodoPreview';\n\nimport s from './EditTodo.module.scss';\n\ninterface EditTodoProps {\n  todoData: ITodoPrewievProps;\n}\n\nconst EditTodo: React.FC<EditTodoProps> = ({ todoData }) => {\n  const { id } = useParams();\n  const format = 'DD.MM.YYYY';\n  const currentDate = moment().format('DD.MM.YYYY');\n\n  const [isShowPreviewInMobile, setIsShowPreviewInMobile] = useState(false);\n  const isMobile = useMediaQuery({ maxWidth: 767 });\n\n  const [partInitial, setPartInitial] = useState<string>('');\n  const [_idInitial, set_idInitial] = useState<string>('');\n\n  const initialState = {\n    additionalInfo: '',\n    dateFrom: currentDate,\n    dateTo: currentDate,\n    otherMembers: '',\n    part: '',\n    subject: '',\n    saveAfterDeadline: false,\n  };\n\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const isUserLogin = useSelector(getLogin);\n  const editTodoStore = useSelector(getEditTodoStore);\n  const arrayUser = useSelector(getEmailList);\n  const options = useSelector(getOptionMenu);\n  const message = useSelector(getTodoMessage);\n  const [showUsersList, setShowUsersList] = useState<boolean>(false);\n  const [selectedUsers, setSelectedUsers] = useState<string[]>([]);\n\n  const [selectedDateFrom, setSelectedDateFrom] = useState<Moment>(\n    moment(currentDate, format)\n  );\n  const [selectedDateTo, setSelectedDateTo] = useState<Moment>(\n    moment(currentDate, format)\n  );\n\n  const [previewData, setPreviewData] = useState(initialState);\n\n  const { control, handleSubmit, reset } = useForm<ITodoCreate>({\n    defaultValues: {\n      additionalInfo: previewData.additionalInfo,\n      dateFrom: previewData.dateFrom,\n      dateTo: previewData.dateTo,\n      otherMembers: previewData.otherMembers,\n      part: { value: previewData.part, label: previewData.part },\n      subject: previewData.subject,\n      saveAfterDeadline: previewData.saveAfterDeadline,\n    },\n  });\n\n  useEffect(() => {\n    const updatePreviewData = async (data: any) => {\n      await setPreviewData({\n        ...data,\n      });\n    };\n    if (todoData && Object.keys(todoData).length > 0) {\n      updatePreviewData(todoData);\n      reset({\n        additionalInfo: todoData.additionalInfo,\n        dateFrom: todoData.dateFrom,\n        dateTo: todoData.dateTo,\n        otherMembers: todoData.otherMembers,\n        part: { value: todoData.part, label: todoData.part },\n        subject: todoData.subject,\n        saveAfterDeadline: todoData.saveAfterDeadline,\n      });\n      setSelectedDateFrom(moment(todoData.dateFrom, format));\n      setSelectedDateTo(moment(todoData.dateTo, format));\n      setSelectedUsers([todoData.otherMembers]);\n      setPartInitial(todoData.part);\n      set_idInitial(todoData._id);\n    }\n    if (!todoData && editTodoStore && Object.keys(editTodoStore).length > 0) {\n      updatePreviewData(editTodoStore);\n      if ('_id' in editTodoStore) {\n        reset({\n          additionalInfo: editTodoStore.additionalInfo,\n          dateFrom: editTodoStore.dateFrom,\n          dateTo: editTodoStore.dateTo,\n          otherMembers: editTodoStore.otherMembers,\n          part: { value: editTodoStore.part, label: editTodoStore.part },\n          subject: editTodoStore.subject,\n          saveAfterDeadline: editTodoStore.saveAfterDeadline,\n        });\n        setSelectedDateFrom(moment(editTodoStore.dateFrom, format));\n        setSelectedDateTo(moment(editTodoStore.dateTo, format));\n        setSelectedUsers([editTodoStore.otherMembers]);\n        set_idInitial(editTodoStore._id);\n        setPartInitial(editTodoStore.part);\n      }\n    }\n  }, [editTodoStore, todoData, reset]);\n\n  useEffect(() => {\n    const fetchTodoFromLocalStorage = () => {\n      const localStorageData = localStorage.getItem('notes-organizer_tasks');\n      if (localStorageData) {\n        const tasksFromLocalStorage = JSON.parse(localStorageData);\n        const todoFromLocalStorage = tasksFromLocalStorage.find(\n          (todo: ITodoCreate) => todo._id === id\n        );\n        return todoFromLocalStorage;\n      }\n      return {};\n    };\n\n    if (!todoData || !Object.keys(todoData).length) {\n      if (isUserLogin && id) {\n        dispatch(getEditTodo(id));\n      }\n      if (!isUserLogin && id) {\n        const editTodoLocalStorage = fetchTodoFromLocalStorage();\n        dispatch(saveEditTodo(editTodoLocalStorage));\n      }\n    }\n  }, [todoData, dispatch, id, isUserLogin]);\n\n  useEffect(() => {\n    if (selectedUsers.length > 0) {\n      updatePreviewField('otherMembers', selectedUsers.join(', '));\n    }\n    if (selectedUsers.length === 0) {\n      updatePreviewField('otherMembers', '');\n    }\n  }, [selectedUsers]);\n\n  const updatePreviewField = (fieldName: string, value: any) => {\n    if (fieldName === 'dateFrom') {\n      const formattedValue = moment(value, 'DD.MM.YYYY');\n      setSelectedDateFrom(formattedValue);\n      setPreviewData(prevData => ({\n        ...prevData,\n        [fieldName]: value,\n      }));\n    }\n    if (fieldName === 'dateTo') {\n      const formattedValue = moment(value, 'DD.MM.YYYY');\n      setSelectedDateTo(formattedValue);\n      setPreviewData(prevData => ({\n        ...prevData,\n        [fieldName]: value,\n      }));\n    }\n    if (fieldName === 'part') {\n      setPreviewData(prevData => ({\n        ...prevData,\n        [fieldName]: value.value,\n      }));\n    } else {\n      setPreviewData(prevData => ({\n        ...prevData,\n        [fieldName]: value,\n      }));\n    }\n  };\n\n  const onSubmit = async (data: ITodoCreate) => {\n    const finalData: ITodoCreate = {\n      part: data.part.value,\n      subject: data.subject,\n      dateFrom: data.dateFrom,\n      dateTo: data.dateTo,\n      additionalInfo: data.additionalInfo,\n      otherMembers: previewData.otherMembers,\n      saveAfterDeadline: data.saveAfterDeadline,\n      _id: _idInitial,\n    };\n\n    if (!isUserLogin) {\n      const existingTasks = JSON.parse(\n        localStorage.getItem('notes-organizer_tasks') || '[]'\n      );\n      const taskIndex = existingTasks.findIndex(\n        (task: ITodoCreate) => task._id === _idInitial\n      );\n\n      if (taskIndex !== -1) {\n        existingTasks[taskIndex] = {\n          ...existingTasks[taskIndex],\n          ...finalData,\n        };\n        localStorage.setItem(\n          'notes-organizer_tasks',\n          JSON.stringify(existingTasks)\n        );\n        dispatch(createMessageConfirmation('Todo edited successfully'));\n      } else {\n        return;\n      }\n    } else {\n      await dispatch(editTodo(finalData));\n    }\n\n    reset({\n      ...initialState,\n    });\n    setShowUsersList(false);\n    setSelectedUsers([]);\n    setSelectedDateFrom(moment());\n    setSelectedDateTo(moment());\n    setPreviewData(initialState);\n    setPartInitial('');\n    naviagteToList();\n  };\n\n  const handleAddUsersClick = () => {\n    if (!showUsersList) {\n      setShowUsersList(true);\n    } else {\n      setShowUsersList(false);\n    }\n  };\n\n  const resetMessage = () => {\n    const timeoutId = setTimeout(() => {\n      dispatch(clearTodoMessage());\n    }, 10000);\n    return () => clearTimeout(timeoutId);\n  };\n\n  const naviagteToList = () => {\n    const timeoutId = setTimeout(() => {\n      navigate('/list');\n    }, 10000);\n    return () => clearTimeout(timeoutId);\n  };\n\n  const handlePreviewButtonClick = () => {\n    setIsShowPreviewInMobile(!isShowPreviewInMobile);\n  };\n\n  return (\n    <section className={s.editTodo}>\n      <Container>\n        <div className={s.todoPart}>\n          <form className={s.form} onSubmit={handleSubmit(onSubmit)}>\n            <Text text={'Розділ'} textClass=\"title-form\" />\n            <Controller\n              control={control}\n              name=\"part\"\n              rules={{ required: true }}\n              render={({ field: { onChange, value }, fieldState }) => (\n                <SelectField\n                  value={value}\n                  handleChange={newValue => {\n                    onChange(newValue);\n                    updatePreviewField('part', newValue);\n                  }}\n                  name=\"part\"\n                  className=\"createTodo\"\n                  placeholder={partInitial}\n                  required={true}\n                  options={options}\n                  defaultValue={{\n                    value: partInitial,\n                    label: partInitial,\n                  }}\n                />\n              )}\n            />\n            <Text text={'Тема'} textClass=\"title-form\" />\n            <Controller\n              control={control}\n              name=\"subject\"\n              rules={{ required: true }}\n              render={({ field: { onChange, value }, fieldState }) => (\n                <TextField\n                  value={value}\n                  control={control}\n                  className=\"createTodo\"\n                  handleChange={e => {\n                    const newValue = e.target.value;\n                    onChange(newValue);\n                    updatePreviewField('subject', newValue);\n                  }}\n                  error={fieldState.error}\n                  {...fields.subject}\n                />\n              )}\n            />\n            <Text text={'Дата початку'} textClass=\"title-form\" />\n            <Controller\n              control={control}\n              name=\"dateFrom\"\n              rules={{ required: true }}\n              render={({ field: { onChange } }) => (\n                <Calendar\n                  dateFormat=\"dd.MM.yyyy\"\n                  showMonthYearPicker={false}\n                  value={selectedDateFrom.toDate()}\n                  handleChange={newValue => {\n                    onChange(newValue);\n                    updatePreviewField('dateFrom', newValue);\n                  }}\n                />\n              )}\n            />\n            <Text text={'Дата завершення'} textClass=\"title-form\" />\n            <Controller\n              control={control}\n              name=\"dateTo\"\n              rules={{ required: true }}\n              render={({ field: { onChange } }) => (\n                <Calendar\n                  dateFormat=\"dd.MM.yyyy\"\n                  showMonthYearPicker={false}\n                  value={selectedDateTo.toDate()}\n                  handleChange={newValue => {\n                    onChange(newValue);\n                    updatePreviewField('dateTo', newValue);\n                  }}\n                />\n              )}\n            />\n            <Text text={'Додаткова інформація'} textClass=\"title-form\" />\n            <Controller\n              control={control}\n              name=\"additionalInfo\"\n              rules={{ required: false }}\n              render={({ field: { onChange, value }, fieldState }) => (\n                <textarea\n                  className={`${s.textarea} ${s.scroll}`}\n                  value={value}\n                  onChange={e => {\n                    onChange(e.target.value);\n                    updatePreviewField('additionalInfo', e.target.value);\n                  }}\n                  rows={3}\n                  cols={40}\n                />\n              )}\n            />\n            {isUserLogin && (\n              <>\n                <Text\n                  text={'Користувачі з яким ви хочете поділитися завданням'}\n                  textClass=\"title-form\"\n                />\n                <div className={s.userListShow}>\n                  <Text\n                    text={selectedUsers.join(', ')}\n                    textClass=\"hidenInputCreateTodo\"\n                  />\n                </div>\n                <div className={s.addUserGroup}>\n                  <div className={s.addUser} onClick={handleAddUsersClick}>\n                    <FaPlus size={20} color=\"white\" />\n                  </div>\n                  <Text\n                    text={\n                      !showUsersList\n                        ? 'Додати користувачів'\n                        : 'Обрати користувачів'\n                    }\n                    textClass=\"title-form-add-user\"\n                  />\n                </div>\n                {showUsersList && (\n                  <div className={s.modal}>\n                    <div className={s.modalBorder}>\n                      <button\n                        className={s.dismissButton}\n                        onClick={handleAddUsersClick}\n                      >\n                        <FontAwesomeIcon\n                          icon={faTimes}\n                          size=\"lg\"\n                          color=\"white\"\n                        />\n                      </button>\n                      <UserList\n                        arrayUser={arrayUser}\n                        selectedUsers={selectedUsers}\n                        setSelectedUsers={setSelectedUsers}\n                      />\n                    </div>\n                  </div>\n                )}\n              </>\n            )}\n            <Text\n              text={'Зберігати завдання після закінчення терміну виконання'}\n              textClass=\"title-form\"\n            />\n            <Controller\n              control={control}\n              name=\"saveAfterDeadline\"\n              render={({ field: { onChange, value } }) => (\n                <div>\n                  <input\n                    type=\"checkbox\"\n                    className={s.checkbox}\n                    checked={value}\n                    onChange={e => {\n                      onChange(e.target.checked);\n                      updatePreviewField('saveAfterDeadline', e.target.checked);\n                    }}\n                  />\n                </div>\n              )}\n            />\n            <div className={s.btnPart}>\n              <div className={s.wrap}>\n                <Button text=\"Зберегти зміни\" btnClass=\"btnLight\" />\n              </div>\n              {isMobile && (\n                <div className={s.wrap}>\n                  <Button\n                    text=\"Перегляд\"\n                    btnClass=\"btnLight\"\n                    handleClick={handlePreviewButtonClick}\n                    type=\"button\"\n                  />\n                </div>\n              )}\n            </div>\n          </form>\n          {!isMobile && (\n            <div className={s.preview}>\n              <Todo {...previewData} />\n            </div>\n          )}\n          {isMobile && isShowPreviewInMobile && (\n            <div className={s.previewInMobile}>\n              <Todo {...previewData} />\n              <div className={s.btnReturn}>\n                <Button\n                  text=\"Повернутися\"\n                  btnClass=\"btnLight\"\n                  handleClick={handlePreviewButtonClick}\n                  type=\"button\"\n                />\n              </div>\n            </div>\n          )}\n        </div>\n        {message && (\n          <Message text={`${message}`} onDismiss={resetMessage} type=\"todo\" />\n        )}\n      </Container>\n    </section>\n  );\n};\n\nexport default EditTodo;\n","import { useSelector } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport { getLogin } from '../../Redux/auth/auth-selectors';\nimport Text from '../../components/Shared/Text';\nimport EditTodo from '../../components/EditTodo/EditTodo';\n\nconst EditPage: React.FC = () => {\n  const isUserLogin = useSelector(getLogin);\n  const location = useLocation();\n  const todoData = location.state;\n\n  return (\n    <>\n      {!isUserLogin && (\n        <Text\n          text={\n            'Зареєструйтесь, щоб отримати доступ до ваших завдань на різних пристроях'\n          }\n          textClass=\"catalogTitle\"\n        />\n      )}\n      <EditTodo todoData={todoData} />\n    </>\n  );\n};\n\nexport default EditPage;\n"],"names":["_ref","todoData","id","useParams","format","currentDate","moment","isShowPreviewInMobile","setIsShowPreviewInMobile","useState","isMobile","useMediaQuery","maxWidth","partInitial","setPartInitial","_idInitial","set_idInitial","initialState","additionalInfo","dateFrom","dateTo","otherMembers","part","subject","saveAfterDeadline","dispatch","useAppDispatch","navigate","useNavigate","isUserLogin","useSelector","getLogin","editTodoStore","getEditTodoStore","arrayUser","getEmailList","options","getOptionMenu","message","getTodoMessage","showUsersList","setShowUsersList","selectedUsers","setSelectedUsers","selectedDateFrom","setSelectedDateFrom","selectedDateTo","setSelectedDateTo","previewData","setPreviewData","control","handleSubmit","reset","useForm","defaultValues","value","label","useEffect","updatePreviewData","async","_objectSpread","data","Object","keys","length","_id","getEditTodo","editTodoLocalStorage","fetchTodoFromLocalStorage","localStorageData","localStorage","getItem","JSON","parse","find","todo","saveEditTodo","updatePreviewField","join","fieldName","formattedValue","prevData","handleAddUsersClick","naviagteToList","timeoutId","setTimeout","clearTimeout","handlePreviewButtonClick","_jsx","className","s","editTodo","children","_jsxs","Container","todoPart","form","onSubmit","finalData","existingTasks","taskIndex","findIndex","task","setItem","stringify","createMessageConfirmation","Text","text","textClass","Controller","name","rules","required","render","_ref2","field","onChange","fieldState","SelectField","handleChange","newValue","placeholder","defaultValue","_ref3","TextField","e","target","error","fields","_ref4","Calendar","dateFormat","showMonthYearPicker","toDate","_ref5","_ref6","concat","textarea","scroll","rows","cols","_Fragment","userListShow","addUserGroup","addUser","onClick","FaPlus","size","color","modal","modalBorder","dismissButton","FontAwesomeIcon","icon","faTimes","UserList","_ref7","type","checkbox","checked","btnPart","wrap","Button","btnClass","handleClick","preview","Todo","previewInMobile","btnReturn","Message","onDismiss","resetMessage","clearTodoMessage","EditPage","useLocation","state","EditTodo"],"sourceRoot":""}